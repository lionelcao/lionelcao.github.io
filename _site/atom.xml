<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Lionel Cao</title>
 <link href="http://lionelcao.github.io/" rel="self"/>
 <link href="http://lionelcao.github.io"/>
 <updated>2014-02-10T23:46:56+08:00</updated>
 <id>http://lionelcao.github.io</id>
 <author>
   <name>北落师门</name>
   <email>whucaolu@gmail.com</email>
 </author>

 
 <entry>
   <title>Teradata Study Notes-Introduction to the Teradata Database(4)</title>
   <link href="http://lionelcao.github.io/database/2014/01/28/tdnotes4"/>
   <updated>2014-01-28T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/database/2014/01/28/tdnotes4</id>
   <content type="html">&lt;p&gt;注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。&lt;/p&gt;

&lt;h2 id=&quot;module5_databases_and_users&quot;&gt;Module5 Databases and Users&lt;/h2&gt;

&lt;h2 id=&quot;databases_and_users_defined&quot;&gt;Databases and Users Defined&lt;/h2&gt;

&lt;p&gt;A Database is created with the CREATE DATABASE command.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;A User is created with the CREATE USER command.&lt;/p&gt;

&lt;p&gt;The only difference between a Database and a User is that a User has a password and may logon to the system.&lt;/p&gt;

&lt;p&gt;Databases and Users are repositories for Database Objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tables – rows and columns of data 
Views – predefined subsets of existing tables
Macros – predefined, stored SQL statements
Triggers – SQL statements associated with a table
Stored Procedures – program stored within Teradata
User Defined Function – C program that provides additional SQL functionality&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;teradata_database_space&quot;&gt;Teradata Database Space&lt;/h2&gt;

&lt;p&gt;Database objects require space in a Database or User as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tables - require Perm Space
Views - do not require Perm Space
Macros - do not require Perm Space
Triggers - do not require Perm Space
Stored Procedures - require Perm Space
UDFs – require Perm Space&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Space limits are specified for each database and for each user:&lt;/p&gt;

&lt;p&gt;Perm Space&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- maximum amount of space available for permanent tables and index  subtables&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spool Space&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- maximum amount of work space available for request processing
- holds intermediate query result sets.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Temp Space&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- maximum amount of space available for global temporary tables
- available to the user until their session is terminated&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;a_database_or_user_with_no_perm_space_may_not_contain_permanent_tables_but_may_contain_views_and_macros&quot;&gt;A database or user with no perm space may not contain permanent tables but may contain views and macros.&lt;/h3&gt;

&lt;h2 id=&quot;space_management&quot;&gt;Space Management&lt;/h2&gt;

&lt;p&gt;The initial Teradata Database system comes with several users and databases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Users: DBC, SysAdmin, SystemFE, TDPuser
- Databases:  Crashdumps, Default, All and Public&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new database or user must be created from an existing database or user.&lt;/p&gt;

&lt;p&gt;All Perm Space limits are subtracted from the owner.&lt;/p&gt;

&lt;p&gt;Perm Space is a zero-sum game – the total of all Perm Space limits must equal the total amount of disk space available.&lt;/p&gt;

&lt;p&gt;Perm Space currently not being used is available as Spool Space or Temp Space.&lt;/p&gt;

&lt;h2 id=&quot;database_security&quot;&gt;Database Security&lt;/h2&gt;

&lt;p&gt;There are several mechanisms to authenticate access to the Teradata Database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDAP
Single Sign-On
Passwords&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After users have logged on to Teradata and have been authenticated, they are authorized access to only those objects allowed by their database privileges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Privileges, or Access Rights&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to authentication and privileges, there are several database objects or constructs that allow for a more secure database environment. These include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Views
Macros
Stored Procedures
UDFs
Roles – a collection of Access Rights
Row Level Security&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;module6_data_distribution_and_access&quot;&gt;Module6 Data Distribution and Access&lt;/h2&gt;

&lt;h2 id=&quot;how_does_the_teradata_database_distribute_rows&quot;&gt;How Does the Teradata Database Distribute Rows?&lt;/h2&gt;

&lt;p&gt;The Teradata Database uses a hashing algorithm to randomly distribute table rows across the AMPs.&lt;/p&gt;

&lt;p&gt;The Primary Index choice determines whether the rows of a table will be evenly or unevenly distributed across the AMPs.&lt;/p&gt;

&lt;p&gt;Evenly distributed table rows result in evenly distributed workloads.&lt;/p&gt;

&lt;p&gt;Each AMP is responsible for its subset of the rows of each table.&lt;/p&gt;

&lt;p&gt;The rows are not placed in any particular order.&lt;/p&gt;

&lt;h3 id=&quot;the_benefits_of_unordered_rows_include&quot;&gt;The benefits of unordered rows include:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;No maintenance needed to preserve order.
The order is independent of any query being submitted.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the_benefits_of_hashed_distribution_include&quot;&gt;The benefits of hashed distribution include:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;The distribution is the same regardless of data volume.
The distribution is based on row content, not data demographics.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;primary_keypk_vs_primary_indexpi&quot;&gt;Primary Key(PK) vs. Primary Index(PI)&lt;/h2&gt;

&lt;p&gt;The PK is a relational modeling convention which uniquely identifies each row.&lt;/p&gt;

&lt;p&gt;The PI is a Teradata convention which determines row distribution and access.&lt;/p&gt;

&lt;p&gt;A well designed database will have tables where the PI is the same as the PK as well as tables where the PI is defined on columns different from the PK.&lt;/p&gt;

&lt;p&gt;Join performance and known access paths might dictate a PI that is different from the PK.&lt;/p&gt;

&lt;h3 id=&quot;primary_key_pk&quot;&gt;Primary Key (PK)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Logical concept of data modeling
• Teradata does not need the PK defined
• No limit on the number of columns
• Documented in the logical data model
• Value must be unique
• Uniquely identifies each row
• Value should not change
• May not be NULL
• Does not imply access path
• Chosen for logical correctness&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;primary_index_pi&quot;&gt;Primary Index (PI)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Mechanism for row distribution and access 
• A table must have one Primary Index
• May be from 1 to 64 columns
• Defined in the CREATE TABLE statement
• Value may be unique or non-unique
• Used to place a row on an AMP
• Value may be changed (Updated)
• May be NULL
• Defines the most efficient access path
• Chosen for physical performance&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The physical mechanism used to assign a row to an AMP&lt;/p&gt;

&lt;p&gt;A table must have a Primary Index&lt;/p&gt;

&lt;p&gt;The Primary Index of the table cannot be changed&lt;/p&gt;

&lt;h3 id=&quot;upi&quot;&gt;UPI&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• If the index choice of column(s) is unique, we call this a UPI (Unique Primary Index).
• A UPI choice will result in even distribution of the rows of the table across all AMPs.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reasons to Choose a UPI: UPI’s guarantee even data distribution, eliminate duplicate row checking, and are always a one-AMP operation.&lt;/p&gt;

&lt;h3 id=&quot;nupi&quot;&gt;NUPI&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• If the index choice of column(s) isn’t unique, we call this a NUPI (Non-Unique Primary Index).
• A NUPI choice will result in even distribution of the rows of the table proportional to the degree of uniqueness of the index.
• NUPIs can cause skewed data.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;why_would_you_choose_an_index_that_is_different_from_the_primary_key&quot;&gt;Why would you choose an Index that is different from the Primary Key?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• Join performance
• Known access paths&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;defining_the_primary_index&quot;&gt;Defining the Primary Index&lt;/h2&gt;

&lt;p&gt;The Primary Index (PI) is defined at table creation.&lt;/p&gt;

&lt;p&gt;Every table must have one Primary Index.&lt;/p&gt;

&lt;p&gt;The Primary Index may consist of 1 to 64 columns.&lt;/p&gt;

&lt;p&gt;The Primary Index of a table may not be changed.&lt;/p&gt;

&lt;p&gt;The Primary Index is the mechanism used to assign a row to an AMP.&lt;/p&gt;

&lt;p&gt;The Primary Index may be Unique (UPI) or Non-Unique (NUPI).&lt;/p&gt;

&lt;p&gt;Unique Primary Indexes result in even row distribution and eliminate duplicate row checking.&lt;/p&gt;

&lt;p&gt;Non-Unique Primary Indexes result in even row distribution proportional to the number of duplicate values. This may cause skewed distribution.&lt;/p&gt;

&lt;h3 id=&quot;upi_2&quot;&gt;UPI&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE Table1
 ( Col1  INTEGER
  ,Col2  INTEGER
  ,Col3  INTEGER )
UNIQUE PRIMARY INDEX (Col1);&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nupi_2&quot;&gt;NUPI&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE Table2
 ( Col1  INTEGER
  ,Col2  INTEGER
  ,Col3  INTEGER )
PRIMARY INDEX (Col2);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;row_distribution_via_hashing&quot;&gt;Row Distribution via Hashing&lt;/h2&gt;

&lt;h3 id=&quot;index_value&quot;&gt;Index Value&lt;/h3&gt;

&lt;h3 id=&quot;hashing_algorithm&quot;&gt;Hashing Algorithm&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;A Row's Primary Index value is passed into the Hashing Algorithm.
The Hashing Algorithm is designed to ensure even distribution of unique values across all AMPs.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;row_hash&quot;&gt;Row Hash&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;The Hashing Algorithm outputs a 32-bit Row-Hash value.
The first 16-bits (the Hash Bucket Number) are used as a pointer into the Hash Map.
Hash values are calculated using the hashing algorithm.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;hash_map&quot;&gt;Hash Map&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;The Hash Map is uniquely configured for each system.
The Hash Map is an array which associates the DSW with a specific AMP.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;amp&quot;&gt;AMP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Two systems with the same number of AMPs will have the same Hash Map.
Changing the number of AMPs in a system requires a change to the Hash Map.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;what_is_a_nopi_table&quot;&gt;What is a NoPI Table?&lt;/h2&gt;

&lt;h3 id=&quot;what_is_a_no_primary_index_nopi_table&quot;&gt;What is a No Primary Index (NoPI) Table?&lt;/h3&gt;

&lt;p&gt;It is simply a table without a primary index.&lt;/p&gt;

&lt;p&gt;As rows are inserted into a NoPI table, they are appended at the end of the table and never inserted in the middle of a hash sequence.&lt;/p&gt;

&lt;p&gt;Organizing/sorting rows based on row hash is therefore avoided.&lt;/p&gt;

&lt;h3 id=&quot;basic_concepts&quot;&gt;Basic Concepts&lt;/h3&gt;

&lt;p&gt;Rows will still be distributed between AMPs. New code (Random Generator) will determine which AMP will receive rows or blocks of rows. Within an AMP, rows are simply appended to the end of the table. Rows will have a unique RowID – the Uniqueness Value is incremented.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;A NoPI table will reduce skew in intermediate ETL tables which have no natural Primary Index.&lt;/p&gt;

&lt;p&gt;Loads (FastLoad and TPump Array Insert) into a NoPI staging table are faster.&lt;/p&gt;

&lt;h2 id=&quot;teradata_columnar&quot;&gt;Teradata Columnar&lt;/h2&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;Columnar (or Column Partitioning) is a new physical database design implementation option that allows sets of columns (including just a single column) of a table or join index to be stored in separate partitions.&lt;/p&gt;

&lt;p&gt;This is effectively an I/O reduction feature to improve performance for suitable classes of workloads.&lt;/p&gt;

&lt;p&gt;This allows the capability for a table or join index to be column (vertically) partitioned, row (horizontally) partitioned or both by using the already existing multilevel partitioning capability.&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;Considerations&lt;/h3&gt;

&lt;p&gt;Note that column partitioning is a physical database design choice and may not be suitable for all workloads using that table/join index.&lt;/p&gt;

&lt;p&gt;It is especially suitable if both a small number of rows are selected and a few columns are projected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When individual rows are deleted, they are not physically deleted, but are marked as deleted.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;teradata_columnar_benefits&quot;&gt;Teradata Columnar Benefits&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Benefits of using the Teradata Columnar feature include:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;improved_query_performance&quot;&gt;Improved query performance&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Column partitioning can be used to improve query performance via column partition elimination.  Column partition elimination reduces the need to access all the data in a row while row partition elimination reduces the need to access all the rows. &lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;reduced_disk_space&quot;&gt;Reduced disk space&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;The feature also allows for the possibility of using a new auto-compression capability which allows data to be automatically (as applicable) compressed as physical rows are inserted into a column-partitioned table or join index.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;increased_flexibility&quot;&gt;Increased flexibility&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Provides a new physical database design option to improve performance for suitable classes of workloads.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;reduced_io&quot;&gt;Reduced I/O&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Allows fast and efficient access to selected data from column partitions, thus reducing query I/O.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ease_of_use&quot;&gt;Ease of use&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Provides simple default syntax for the CREATE TABLE and CREATE JOIN INDEX statements.  No change is needed to queries.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;unique_primary_index_upi_access&quot;&gt;Unique Primary Index (UPI) Access&lt;/h2&gt;

&lt;p&gt;Accessing a table using a Primary Index is the most efficient way to access the data and is always a one-AMP operation. In the case of a UPI, the one-AMP access can return, at most, one row. In the example on the facing page, we are looking for the row whose primary index value is 45.&lt;/p&gt;

&lt;p&gt;By specifying the PI value as part of our selection criteria, we are guaranteed that only the AMP containing the specified row will be searched.&lt;/p&gt;

&lt;p&gt;The correct AMP is located by taking the PI value and passing it through the hashing algorithm. Hashing takes place in the Parsing Engine. The output of the hashing algorithm contains information that will point to a specific AMP. Once it has isolated the appropriate AMP, finding the row is quick and efficient.&lt;/p&gt;

&lt;h2 id=&quot;nonunique_primary_index_nupi_access&quot;&gt;Non-Unique Primary Index (NUPI) Access&lt;/h2&gt;

&lt;p&gt;Accessing a table using a Non-Unique Primary Index (NUPI) is also a one-AMP operation. In the case of a NUPI, the one-AMP access can return zero to many rows. In the example on the facing page, we are looking for the rows whose primary index value is 555-7777.&lt;/p&gt;

&lt;p&gt;By specifying the PI value as part of our selection criteria, we are once again guaranteeing that only the AMP containing the required rows will need to be searched.&lt;/p&gt;

&lt;p&gt;The correct AMP is located by taking the PI value and passing it through the hashing algorithm executed in the Parsing Engine. The output of the hashing algorithm will once again point to a specific AMP. Once it has isolated the appropriate AMP, it must find all rows that have the specified value. In the example, the AMP returns two rows.&lt;/p&gt;

&lt;h2 id=&quot;upi_row_distribution&quot;&gt;UPI Row Distribution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/UPI.png&quot; alt=&quot;UPI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nupi_row_distribution&quot;&gt;NUPI Row Distribution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/NUPI.png&quot; alt=&quot;NUPI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;highly_nonunique_nupi_row_distribution&quot;&gt;Highly Non-Unique NUPI Row Distribution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/HNUPI.png&quot; alt=&quot;HNUPI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;partitioned_primary_index_ppi&quot;&gt;Partitioned Primary Index (PPI)&lt;/h2&gt;

&lt;h2 id=&quot;multilevel_partitioned_primary_index_mlppi&quot;&gt;Multi-Level Partitioned Primary Index (MLPPI)&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>Teradata Study Notes-Introduction to the Teradata Database(3)</title>
   <link href="http://lionelcao.github.io/database/2014/01/26/tdnotes3"/>
   <updated>2014-01-26T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/database/2014/01/26/tdnotes3</id>
   <content type="html">&lt;p&gt;注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。&lt;/p&gt;

&lt;h2 id=&quot;module4_components_and_architecture&quot;&gt;Module4 Components and Architecture&lt;/h2&gt;

&lt;h2 id=&quot;what_is_a_node&quot;&gt;What is a node?&lt;/h2&gt;

&lt;p&gt;Teradata software, gateway software and channel-driver software run as processes&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Parsing Engines(PE) and Access Module Processors(AMP) are Virtual Processors(Vproc) which run under control of Parallel Database Extensions(PDE)&lt;/p&gt;

&lt;p&gt;Each AMP is associated with a Virtual Disk (Vdisk)&lt;/p&gt;

&lt;p&gt;A single node is called a Symmetric Multi-Processor (SMP)&lt;/p&gt;

&lt;p&gt;All AMPs and PEs communicate via the BYNET&lt;/p&gt;

&lt;h2 id=&quot;what_is_teradata_virtual_storage_tvs&quot;&gt;What is Teradata Virtual Storage (TVS)?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• TVS (Teradata 13.0) is a change to the way in which Teradata accesses storage.
• Purpose is to manage a Multi-Temperature Data Warehouse.
• Pools all of the cylinders within a clique's disk space and allocates cylinders from this storage pool to individual AMPs.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;advantages_include&quot;&gt;Advantages include:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Simplifies adding storage to existing cliques
  – Improved control over storage growth. You can add storage to the clique-storage-pool versus to every AMP.
  – Allows sharing of storage devices among AMPs which is more cost effective.
• Enables mixing drive sizes / speeds / technologies
  – Enables the “mixing” of storage devices (e.g., spinning disks, Solid State Disks – SSD).
• Enables non-intrusive migration of data
  – The most frequently accessed data (hot data) can migrate to the high performing cylinders and infrequently accessed data (cold data) can migrate to the lower performing cylinders.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;teradata_virtual_storage_concepts&quot;&gt;Teradata Virtual Storage Concepts&lt;/h3&gt;

&lt;p&gt;The facing page illustrates the conceptual differences with and without Teradata Virtual Storage. One of the benefits of Teradata Virtual Storage is the ease of adding storage to an existing system.&lt;/p&gt;

&lt;p&gt;Before Teradata Virtual Storage:&lt;/p&gt;

&lt;p&gt;Existing systems have integral number of drives/AMP&lt;/p&gt;

&lt;p&gt;Adding storage requires an additional drive or two per AMP – this means a 50% or 100% increase in capacity&lt;/p&gt;

&lt;p&gt;With Teradata Virtual Storage, you can add any number of drives.&lt;/p&gt;

&lt;p&gt;Added drives are shared by all AMPs within a clique&lt;/p&gt;

&lt;p&gt;These new disks may have different capacities and / or performance than those disks which already reside in the system.&lt;/p&gt;

&lt;h3 id=&quot;storage_performance_relative_response_times__eg_fast_medium_slow&quot;&gt;Storage Performance relative response times – (e.g., fast, medium, slow).&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Profiles the performance of all the disk drives (e.g., SSD versus spinning disks)
• Identifies performance zones (usually 10) on each spinning disk drive&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;data_access_frequency__referred_to_as_data_temperature_eg_hot_warm_cold&quot;&gt;Data Access Frequency – referred to as “Data Temperature” (e.g., hot, warm, cold).&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• TVS records information about data access (called Profiling and Metric Collection)
   – How long it takes to access data (I/O response times)
   – How often data is accessed (effectively the data temperature)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;tvs_places_data_for_optimal_access_based_upon_storage_performance_type_of_data_wal_depot_spool_etc_and_the_results_of_metric_collection&quot;&gt;TVS places data for optimal access based upon storage performance, type of data (WAL, Depot, Spool, etc.) and the results of metric collection.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Initial Data Placement
• Migration of data based upon data temperature&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;three_types_of_data_migration&quot;&gt;Three types of Data Migration:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Background Process During Queries – moves 10% of data in about one week
• Optimize Storage Command (Database off-hours) - moves 10% of data in about 8 hours
   – Ignores other work – just runs “flat out”
• Anticipatory migration to make room in fast reserve, fast or warm storage for hotter data(when needed)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;multitemperature_data_example&quot;&gt;Multi-Temperature Data Example&lt;/h2&gt;

&lt;p&gt;The facing page illustrates an example of using a Multi-Temperature Warehouse.&lt;/p&gt;

&lt;p&gt;Example of Multi-Temperature with a PPI Table:&lt;/p&gt;

&lt;p&gt;If this is time based (e.g., DATE), then rows of the table are physically grouped by DATE and the groups ordered by DATE, even though hash ordered within the partition for each DATE value.&lt;/p&gt;

&lt;p&gt;Because the rows are logically grouped together, they reside in a set of cylinders.&lt;/p&gt;

&lt;p&gt;Based on usage patterns, all the cylinders of a partition will have same temperature.&lt;/p&gt;

&lt;p&gt;As usage drops, a partition cools off, and eventually its cylinders get migrated out of FAST to MEDIUM, then eventually to SLOW storage.&lt;/p&gt;

&lt;p&gt;Newly loaded partition will assume temperature of previous latest (probably HOT).&lt;/p&gt;

&lt;p&gt;While TVS can monitor data temperatures, it can’t change or manipulate the temperature of your data because data temperatures are primarily dictated by the workloads that are run on the warehouse. That is, the more queries that are run against a particular table (or tables) the higher its temperature(s). The only way to change a table’s temperature is to alter the number of queries that are run against it.&lt;/p&gt;

&lt;p&gt;For technical accuracy, TVS temperature is measured at a cylinder level &lt;code&gt;not a data level&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;teradata_compression_comparison&quot;&gt;Teradata Compression Comparison&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• Multi-Value Compression vs. VARCHAR
• Algorithmic Compression
• Block Level Compression&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A business can choose any combination or all three on a column/table.&lt;/p&gt;

&lt;h2 id=&quot;major_components_of_the_teradata_database&quot;&gt;Major Components of the Teradata Database&lt;/h2&gt;

&lt;p&gt;We have looked at the overall node, and now we will describe the components that make up a node in detail.&lt;/p&gt;

&lt;h3 id=&quot;parsing_engine_pe&quot;&gt;Parsing Engine (PE)&lt;/h3&gt;

&lt;p&gt;The Parsing Engine (PE) is a virtual processor (vproc) that interprets SQL requests, receives input records, and passes data. To do that it sends the messages over the BYNET to the AMPs.&lt;/p&gt;

&lt;p&gt;Note: PDE controls the virtual processors (vprocs).&lt;/p&gt;

&lt;h3 id=&quot;bynet&quot;&gt;BYNET&lt;/h3&gt;

&lt;p&gt;The BYNET is the message-passing layer. It determines which AMP(s) (Access Module Processor) should receive a message.&lt;/p&gt;

&lt;h3 id=&quot;access_module_processor_amp&quot;&gt;Access Module Processor (AMP)&lt;/h3&gt;

&lt;p&gt;The AMP is a virtual processor (vproc) designed for and dedicated to managing a portion of the entire database. It performs all database management functions such as sorting, aggregating, and formatting data. The AMP receives data from the PE, formats rows, and distributes them to the disk storage units it controls. The AMP also retrieves the rows requested by the Parsing Engine.&lt;/p&gt;

&lt;p&gt;Note: PDE controls the virtual processors (vprocs).&lt;/p&gt;

&lt;h3 id=&quot;disks&quot;&gt;Disks&lt;/h3&gt;

&lt;p&gt;Disks are disk drives associated with an AMP that store the data rows. On current systems, they are implemented using a disk array.&lt;/p&gt;

&lt;h3 id=&quot;what_happens_when_a_query_is_submitted&quot;&gt;What Happens When a Query is Submitted?&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1. The Parser evaluates the SQL for proper syntax.
2. The Optimizer develops the least expensive plan.
3. The BYNET passes the steps from the Dispatcher to the AMPs.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the_parsing_engine_pe&quot;&gt;The Parsing Engine (PE)&lt;/h2&gt;

&lt;p&gt;The Parsing Engine is responsible for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Managing individual sessions(up to 120 sessions per PE)
• Parsing and optimizing your SQL requests
• Building query plans with the parallel-aware, cost-based, intelligent Optimizer
• Dispatching the optimized plan to the AMPs
• EBCDIC/ASCII input conversion(if necessary)
• Sending the answer set response back to the requesting client&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the_bynet&quot;&gt;The BYNET&lt;/h2&gt;

&lt;p&gt;Dual redundant, fault-tolerant, bi-directional interconnect network that enables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Automatic load balancing of message traffic
• Automatic reconfiguration after fault detection
• Scalable bandwidth as nodes are added&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The BYNET connects and communicates with all the AMPs and PEs in the system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Between nodes, the BYNET hardware carries broadcast and point-to-point communications
• On a node, BYNET software and PDE together control which AMPs receive a multicast communication
• Merges the final answer set&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the_access_module_processor_amp&quot;&gt;The Access Module Processor (AMP)&lt;/h2&gt;

&lt;p&gt;The AMP is responsible for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Storing rows to and retrieving rows from its vdisk 
• Lock management 
• Sorting rows and aggregating columns
• Join processing
• Output conversion and formatting (ASCII, EBCDIC)
• Creating answer sets for clients
• Disk space management and accounting
• Special utility protocols
• Recovery processing&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;teradata_database_software&quot;&gt;Teradata Database Software&lt;/h2&gt;

&lt;p&gt;The Teradata Database requires three distinct pieces of software: &lt;code&gt;TPA&lt;/code&gt;, &lt;code&gt;PDE&lt;/code&gt;, and &lt;code&gt;OS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Linux or Windows operating system (OS) and a Teradata Database software license are necessary for each node.&lt;/p&gt;

&lt;p&gt;A Trusted Parallel Application (TPA) implements virtual processors and runs on the OS with PDE. The Teradata Database is the only TPA that runs on Teradata. The components of the Teradata Database software include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;•Channel Driver 
•Teradata Gateway 
•AMP 
•PE&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parallel Database Extensions (PDE) was added to the operating system to support the parallel software environment. PDE controls the virtual processor (vproc) resources.&lt;/p&gt;

&lt;p&gt;A virtual processor (vproc) is a collection of software processes running under the multi-tasking environment of the operating system.&lt;/p&gt;

&lt;p&gt;The client may be a mainframe system, such as IBM or Amdahl, which is channel-attached to the Teradata Database, or it may be a PC, UNIX, or Linux-based system that is LAN-attached.&lt;/p&gt;

&lt;p&gt;The client application submits a SQL request to the database, receives the response, and submits the response to the user. This application could be a business intelligence (BI) tool or data integration (DI/ETL/ELT) tool, submitting queries to Teradata or loading/updating tables in the database.&lt;/p&gt;

&lt;h2 id=&quot;layers_of_the_data_warehouse_architecture&quot;&gt;Layers of the Data Warehouse Architecture&lt;/h2&gt;

&lt;p&gt;There are several “layers” that make up the EDW environment. These layers include:&lt;/p&gt;

&lt;h3 id=&quot;staging_layer&quot;&gt;Staging Layer&lt;/h3&gt;

&lt;p&gt;Staging – the primary purpose of the staging layer is to perform data transformation and loading during either the ETL or ELT process.&lt;/p&gt;

&lt;h3 id=&quot;access_layer&quot;&gt;Access Layer&lt;/h3&gt;

&lt;p&gt;Access is often provided via views and business intelligence (BI) tools; whether a Teradata application or a 3rd party tool.&lt;/p&gt;

&lt;h3 id=&quot;physical_layer&quot;&gt;Physical Layer&lt;/h3&gt;

&lt;p&gt;Physical – the physical layer is where denormalizations that will make access more efficient occur; pre-aggregations, summary tables, join indexes, etc.&lt;/p&gt;

&lt;h3 id=&quot;data_lab&quot;&gt;Data Lab&lt;/h3&gt;

&lt;p&gt;This is Teradata’s implementation of a controlled “sandbox” environment. It enables rapid loading and analysis of new data combined with existing warehouse data. It quickly assimilates untested data into a “non-production” portion of the warehouse, providing a self-provisioning, self-service environment for prototyping and analysis on new, un-cleansed data, which is temporary in nature. 注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。 Data Lab is comprised of two Viewpoint portlets.&lt;/p&gt;

&lt;h2 id=&quot;channelattached_client_software&quot;&gt;Channel-Attached Client Software&lt;/h2&gt;

&lt;h3 id=&quot;cli_calllevel_interface&quot;&gt;CLI (Call-Level Interface)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Request and response control
• Buffer allocation and initialization
• Lowest level interface to the Teradata Database
• Library of routines for blocking/unblocking requests and responses to/from RDBMS
• Performs logon and logoff functions&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;tdp_teradata_director_program&quot;&gt;TDP (Teradata Director Program)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Manages session traffic between CLI and the Teradata Database
• Session balancing across multiple PEs
• Failure notification (application failure, Teradata Database restart)
• Logging, verification, recovery, restart, security&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;• Connection made via HCA, Bus &amp;amp; Tag or ESCON cables, Channel Driver, and PE&lt;/p&gt;

&lt;h2 id=&quot;networkattached_client_software&quot;&gt;Network-Attached Client Software&lt;/h2&gt;

&lt;h3 id=&quot;odbc&quot;&gt;ODBC&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Call-level interface
• Teradata Database ODBC driver is used to connect applications with the Teradata Database&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;jdbc&quot;&gt;JDBC&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• API - allows platform independent JAVA applications to access Teradata.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mtdp_micro_teradata_director_program&quot;&gt;MTDP (Micro Teradata Director Program)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Performs many TDP functions including session management but not session balancing across PEs&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mosi_micro_operating_system_interface&quot;&gt;MOSI (Micro Operating System Interface)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Provides O/S and network protocol independent interface&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ole_db&quot;&gt;OLE DB&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;• Microsoft API that provides uniform access&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;• Connection made via Ethernet or LAN card, cables, Teradata Gateway, and PE.&lt;/p&gt;

&lt;p&gt;• Multiple LAN connections for redundancy.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>服务器三大体系SMP、NUMA、MPP介绍</title>
   <link href="http://lionelcao.github.io/hardware/2014/01/25/serverarch"/>
   <updated>2014-01-25T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/hardware/2014/01/25/serverarch</id>
   <content type="html">&lt;p&gt;从系统架构来看，目前的商用服务器大体可以分为三类，即对称多处理器结构（SMP：Symmetric Multi-Processor），非一致存储访问结构（NUMA：Non-Uniform Memory Access），以及海量并行处理结构（MPP：Massive Parallel Processing）。它们的特征分别描述如下：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;smpsymmetric_multiprocessor&quot;&gt;SMP（Symmetric Multi-Processor）&lt;/h2&gt;

&lt;p&gt;　　所谓对称多处理器结构，是指服务器中多个CPU对称工作，无主次或从属关系。各CPU共享相同的物理内存，每个 CPU访问内存中的任何地址所需时间是相同的，因此SMP也被称为一致存储器访问结构（UMA：Uniform Memory Access）。对SMP服务器进行扩展的方式包括增加内存、使用更快的CPU、增加CPU、扩充I/O（槽口数与总线数）以及添加更多的外部设备（通常是磁盘存储）。&lt;/p&gt;

&lt;p&gt;　　SMP服务器的主要特征是共享，系统中所有资源（CPU、内存、I/O等）都是共享的。也正是由于这种特征，导致了SMP服务器的主要问题，那就是它的扩展能力非常有限。对于SMP服务器而言，每一个共享的环节都可能造成SMP服务器扩展时的瓶颈，而最受限制的则是内存。由于每个CPU必须通过相同的内存总线访问相同的内存资源，因此随着CPU数量的增加，内存访问冲突将迅速增加，最终会造成CPU资源的浪费，使 CPU性能的有效性大大降低。实验证明，SMP服务器CPU利用率最好的情况是2至4个CPU。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smp.jpg&quot; alt=&quot;smp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　图1.SMP服务器CPU利用率状态&lt;/p&gt;

&lt;h2 id=&quot;numanonuniform_memory_access&quot;&gt;NUMA（Non-Uniform Memory Access）&lt;/h2&gt;

&lt;p&gt;　　由于SMP在扩展能力上的限制，人们开始探究如何进行有效地扩展从而构建大型系统的技术，NUMA就是这种努力下的结果之一。利用NUMA技术，可以把几十个CPU（甚至上百个CPU）组合在一个服务器内。其CPU模块结构如图2所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/numa.jpg&quot; alt=&quot;muma&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　图2.NUMA服务器CPU模块结构&lt;/p&gt;

&lt;p&gt;　　NUMA服务器的基本特征是具有多个CPU模块，每个CPU模块由多个CPU（如4个）组成，并且具有独立的本地内存、I/O槽口等。由于其节点之间可以通过互联模块（如称为Crossbar Switch）进行连接和信息交互，因此每个CPU可以访问整个系统的内存（这是NUMA系统与MPP系统的重要差别）。显然，访问本地内存的速度将远远高于访问远地内存（系统内其它节点的内存）的速度，这也是非一致存储访问NUMA的由来。由于这个特点，为了更好地发挥系统性能，开发应用程序时需要尽量减少不同CPU模块之间的信息交互。利用NUMA技术，可以较好地解决原来SMP系统的扩展问题，在一个物理服务器内可以支持上百个CPU。比较典型的NUMA服务器的例子包括HP的Superdome、SUN15K、IBMp690等。&lt;/p&gt;

&lt;p&gt;　　但NUMA技术同样有一定缺陷，由于访问远地内存的延时远远超过本地内存，因此当CPU数量增加时，系统性能无法线性增加。如HP公司发布Superdome服务器时，曾公布了它与HP其它UNIX服务器的相对性能值，结果发现，64路CPU的Superdome （NUMA结构）的相对性能值是20，而8路N4000（共享的SMP结构）的相对性能值是6.3。从这个结果可以看到，8倍数量的CPU换来的只是3倍性能的提升。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mpp.jpg&quot; alt=&quot;mpp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　图3.MPP服务器架构图&lt;/p&gt;

&lt;h2 id=&quot;mppmassive_parallel_processing&quot;&gt;MPP（Massive Parallel Processing）&lt;/h2&gt;

&lt;p&gt;　　和NUMA不同，MPP提供了另外一种进行系统扩展的方式，它由多个SMP服务器通过一定的节点互联网络进行连接，协同工作，完成相同的任务，从用户的角度来看是一个服务器系统。其基本特征是由多个SMP服务器（每个SMP服务器称节点）通过节点互联网络连接而成，每个节点只访问自己的本地资源（内存、存储等），是一种完全无共享（Share Nothing）结构，因而扩展能力最好，理论上其扩展无限制，目前的技术可实现512个节点互联，数千个CPU。目前业界对节点互联网络暂无标准，如 NCR的Bynet，IBM的SPSwitch，它们都采用了不同的内部实现机制。但节点互联网仅供MPP服务器内部使用，对用户而言是透明的。&lt;/p&gt;

&lt;p&gt;　　在MPP系统中，每个SMP节点也可以运行自己的操作系统、数据库等。但和NUMA不同的是，它不存在异地内存访问的问题。换言之，每个节点内的CPU不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为数据重分配（Data Redistribution）。&lt;/p&gt;

&lt;p&gt;　　但是MPP服务器需要一种复杂的机制来调度和平衡各个节点的负载和并行处理过程。目前一些基于MPP技术的服务器往往通过系统级软件（如数据库）来屏蔽这种复杂性。举例来说，NCR的Teradata就是基于MPP技术的一个关系数据库软件，基于此数据库来开发应用时，不管后台服务器由多少个节点组成，开发人员所面对的都是同一个数据库系统，而不需要考虑如何调度其中某几个节点的负载。&lt;/p&gt;

&lt;h2 id=&quot;numampp&quot;&gt;NUMA与MPP的区别&lt;/h2&gt;

&lt;p&gt;　　从架构来看，NUMA与MPP具有许多相似之处：它们都由多个节点组成，每个节点都具有自己的CPU、内存、I/O，节点之间都可以通过节点互联机制进行信息交互。那么它们的区别在哪里？通过分析下面NUMA和MPP服务器的内部架构和工作原理不难发现其差异所在。&lt;/p&gt;

&lt;p&gt;　　首先是节点互联机制不同，NUMA的节点互联机制是在同一个物理服务器内部实现的，当某个CPU需要进行远地内存访问时，它必须等待，这也是NUMA服务器无法实现CPU增加时性能线性扩展的主要原因。而MPP的节点互联机制是在不同的SMP服务器外部通过I/O 实现的，每个节点只访问本地内存和存储，节点之间的信息交互与节点本身的处理是并行进行的。因此MPP在增加节点时性能基本上可以实现线性扩展。&lt;/p&gt;

&lt;p&gt;　　其次是内存访问机制不同。在NUMA服务器内部，任何一个CPU可以访问整个系统的内存，但远地访问的性能远远低于本地内存访问，因此在开发应用程序时应该尽量避免远地内存访问。在MPP服务器中，每个节点只访问本地内存，不存在远地内存访问的问题。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;数据仓库的选择&lt;/h2&gt;

&lt;p&gt;　　哪种服务器更加适应数据仓库环境？这需要从数据仓库环境本身的负载特征入手。众所周知，典型的数据仓库环境具有大量复杂的数据处理和综合分析，要求系统具有很高的I/O处理能力，并且存储系统需要提供足够的I/O带宽与之匹配。而一个典型的OLTP系统则以联机事务处理为主，每个交易所涉及的数据不多，要求系统具有很高的事务处理能力，能够在单位时间里处理尽量多的交易。显然这两种应用环境的负载特征完全不同。&lt;/p&gt;

&lt;p&gt;　　从NUMA架构来看，它可以在一个物理服务器内集成许多CPU，使系统具有较高的事务处理能力，由于远地内存访问时延远长于本地内存访问，因此需要尽量减少不同CPU模块之间的数据交互。显然，NUMA架构更适用于OLTP事务处理环境，当用于数据仓库环境时，由于大量复杂的数据处理必然导致大量的数据交互，将使CPU的利用率大大降低。&lt;/p&gt;

&lt;p&gt;　　相对而言，MPP服务器架构的并行处理能力更优越，更适合于复杂的数据综合分析与处理环境。当然，它需要借助于支持MPP技术的关系数据库系统来屏蔽节点之间负载平衡与调度的复杂性。另外，这种并行处理能力也与节点互联网络有很大的关系。显然，适应于数据仓库环境的MPP服务器，其节点互联网络的I/O性能应该非常突出，才能充分发挥整个系统的性能。&lt;/p&gt;

&lt;p&gt;注：本文转自&lt;a href=&quot;http://www.enet.com.cn/article/2010/0511/A20100511651737_2.shtml&quot;&gt;http://www.enet.com.cn/article/2010/0511/A20100511651737_2.shtml&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Teradata Study Notes-Introduction to the Teradata Database(2)</title>
   <link href="http://lionelcao.github.io/database/2014/01/23/tdnotes2"/>
   <updated>2014-01-23T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/database/2014/01/23/tdnotes2</id>
   <content type="html">&lt;p&gt;注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。&lt;/p&gt;

&lt;h2 id=&quot;module2__relational_database_concepts&quot;&gt;Module2 - Relational Database Concepts&lt;/h2&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what_is_a_database&quot;&gt;What is a Database?&lt;/h2&gt;

&lt;p&gt;A database is a collection of permanently stored data that is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Logically related - the data relates to other data (tables to tables).
Shared - many users may access the data.
Protected - access to data is controlled.
Managed - the data has integrity and value.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;logicalrelational_modeling&quot;&gt;Logical/Relational Modeling&lt;/h2&gt;

&lt;p&gt;The Logical Model&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Should be designed without regard to usage
  *Accommodates a wide variety of front end tools
  *Allows the database to be created more quickly
Should be the same regardless of data volume
Data is organized according to what it represents - real world business data in table (relational) form
Includes all the data definitions within the scope of the application or enterprise
Is generic - the logical model is the template for physical implementation on any RDBMS platform&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normalization&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Process of reducing a complex data structure into a simple, stable one
Involves removing redundant attributes, keys, and relationships from the conceptual data model&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;relational_databases&quot;&gt;Relational Databases&lt;/h2&gt;

&lt;p&gt;Relational databases are solidly founded on Set Theory and are based on the Relational Model.&lt;/p&gt;

&lt;p&gt;The key to understanding relational databases is the concept of the table, which is made up of rows and columns.&lt;/p&gt;

&lt;p&gt;A column is an attribute of the entity that a table represents.&lt;/p&gt;

&lt;p&gt;A row is one instance of all the columns of a table.&lt;/p&gt;

&lt;h2 id=&quot;3nf_vs_star_schema_model&quot;&gt;3NF vs. Star Schema Model&lt;/h2&gt;

&lt;p&gt;A normalized model includes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Entities - One record in a table
• Attributes - Columns
• Relationships - between tables&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Characteristics of a 3NF Model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• The ability to support ad-hoc queries&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Star Schema Model May Include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Facts
• Dimensions
• Snowflakes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Characteristics of a Star Schema Model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• They tend to have fewer entities
• They advocate a greater level of denormalization&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;primary_key&quot;&gt;Primary Key&lt;/h2&gt;

&lt;p&gt;Primary Key (PK) values uniquely identify each row in a table.&lt;/p&gt;

&lt;p&gt;Primary Key Rules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• A Primary Key is required for every table.
• Only one Primary Key is allowed in a table.
• Primary Keys may consist of one or more columns.
• Primary Keys cannot have duplicate values (ND).
• Primary Keys cannot be null (NN).
• Primary Keys are considered “non-changing” values (NC).&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;foreign_key&quot;&gt;Foreign Key&lt;/h3&gt;

&lt;p&gt;Foreign Key (FK) value identifies table relationships.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Foreign Keys (FK) are optional.
• A table may have more than one FK.
• A FK may consist of more than one column.
• FK values may be duplicated.
• FK values may be null.
• FK values may be changed.
• FK values must exist elsewhere as a PK (i.e. have referential integrity).&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;relational_advantages&quot;&gt;Relational Advantages&lt;/h2&gt;

&lt;p&gt;Advantages of a Relational Database compared to other database methodologies include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• More flexible than other types
• Allows businesses to quickly respond to changing conditions
• Being data-driven vs. application driven
• Modeling the business, not the processes
• Makes applications easier to build because the data does more of the work
• A single copy of the data may serve multiple purposes
• Supporting trend toward end-user computing
• Being easy to understand
• No need to know the access path
• Solidly founded in set theory&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;module3__teradata_and_the_data_warehouse&quot;&gt;Module3 - Teradata and the Data Warehouse&lt;/h2&gt;

&lt;h2 id=&quot;evolution_of_data_processing&quot;&gt;Evolution of Data Processing&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;On-line Transaction Processing (OLTP)
Decision Support Systems (DSS)
On-line Analytical Processing (OLAP)
Data Mining (DM)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;row_versus_set_processing&quot;&gt;Row versus Set Processing&lt;/h2&gt;

&lt;p&gt;What is Row-by-Row Processing?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• One row is fetched at a time and all calculations are performed on it.
• The next row is fetched and processed, and this process continues.
• A benefit of row processing is that there is less lock contention.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is Set Processing?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Data is processed set-by-set, without a cursor.
• A single SQL statement completely processes all rows that meet the condition as a set (i.e., to sum all payment rows with 100 or less balances.)
• With sufficient rows to process, it can be 10 to 30+ or more times faster.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some Good Uses of Set Processing include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• An update with all AMPs involved
• Single session processing which takes advantage of parallel processing
• Efficient updates of large amounts of data.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;response_time_versus_throughput&quot;&gt;Response Time versus Throughput&lt;/h2&gt;

&lt;p&gt;When determining how fast something is, there are two kinds of measures. You can measure how long it takes to do something or you can measure how much gets done per unit time. The former is referred to as response time, access time, transmission time, or execution time depending on the context. The latter is referred to as throughput.&lt;/p&gt;

&lt;h3 id=&quot;response_time&quot;&gt;Response Time&lt;/h3&gt;

&lt;p&gt;This speed measure is specified by an elapsed time from the initiation of some activity until its completion. The phrase response time is often used in operating systems contexts.&lt;/p&gt;

&lt;h3 id=&quot;throughput&quot;&gt;Throughput&lt;/h3&gt;

&lt;p&gt;A throughput measure is an amount of something per unit time. For operating systems, throughput is often measured as tasks or transactions per unit time. For storage systems or networks throughput is measured as bytes or bits per unit time. For processors, the number of instructions executed per unit time is an important component of performance.&lt;/p&gt;

&lt;h2 id=&quot;what_does_this_mean_to_teradata&quot;&gt;What Does this Mean to Teradata?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Response time measures the average duration of queries and throughput measures quantity of queries completed during a time interval.
Throughput is a measure of the amount of work processed while response time is a measure of process completion.
Throughput is how many queries were processed, while response time is how long that processing took.
Throughput is the number of queries executed in an hour and response time is the elapsed time per query.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to improve both response time and throughput on a Teradata system, you could increase CPU power (i.e., add nodes), implement workload management to control resources, and decrease the number of concurrent users.&lt;/p&gt;

&lt;h2 id=&quot;the_advantage_of_using_detail_data&quot;&gt;The Advantage of Using Detail Data&lt;/h2&gt;

&lt;p&gt;Until recently, most business decisions were based on summary data.&lt;/p&gt;

&lt;p&gt;The problem is that summarized data is not as useful as detail data and cannot answer some questions with accuracy.&lt;/p&gt;

&lt;p&gt;With summarized data, peaks and valleys are leveled when the peaks fall at the end of a reporting period and are cut in half—as shown in the example on the facing page.&lt;/p&gt;

&lt;p&gt;Here’s another example. Think of your monthly bank statement that records checking account activity. If it only told you the total amount of deposits and withdrawals, would you be able to tell if a certain check had cleared? To answer that question you need a list of every check received by your bank. You need detail data.&lt;/p&gt;

&lt;p&gt;Decision support—answering business questions—is the real purpose of databases. To answer business questions, decision-makers must have four things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The right data
Enough detail data
Proper data structure
Enough computer power to access and produce reports on the data&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strategic workloads tend to rely heavily on detail data.&lt;/p&gt;

&lt;p&gt;Consider your own business and how it uses data. Is that data detailed or summarized? If it’s summarized, are there questions it cannot answer?&lt;/p&gt;

&lt;h2 id=&quot;data_warehouse_usage_evolution&quot;&gt;Data Warehouse Usage Evolution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Stage 1 - Reporting: What happened?
          Primarily Batch Pre-Defined Reports
Stage 2 - Analyzing: Why did it happen?
          Increase in Ad Hoc Queries
Stage 3 - Predicting: What will happen?
          Analytical Modeling Grows
Stage 4 - Operationalizing: What is happening?
          Continuous Update &amp;amp; Time Sensitive Queries Become Important
Stage 5 - Active Warehousing: Make it happen!
          Event Based Triggering Takes Hold&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;active_enterprise_intelligence&quot;&gt;Active Enterprise Intelligence&lt;/h2&gt;

&lt;p&gt;Active Enterprise Intelligence is the seamless integration of the ADW into the customer’s existing business and technical architectures.&lt;/p&gt;

&lt;p&gt;Active Enterprise Intelligence (AEI) is a business strategy for providing strategic and operational intelligence to back office and front line users from a single enterprise data warehouse.&lt;/p&gt;

&lt;p&gt;The Active Enterprise Intelligence environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Is responsive, agile, and capable of driving better, faster decisions that drive intelligent, and often immediate, actions. (Active)
Provides a single view of the business, across appropriate business functions, and enables new operational users, processes, and applications. (Enterprise)
Supports traditional strategic users and new operational users of the Enterprise Data Warehouse. Most importantly, it enables the linkage and alignment of operational systems, business processes and people with corporate goals so companies may execute on their strategies. (Intelligence)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;active_data_warehousing&quot;&gt;Active Data Warehousing&lt;/h2&gt;

&lt;p&gt;ADW is traditional Data Warehousing (EDW) with some active elements:&lt;/p&gt;

&lt;p&gt;Active Load&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Loading the database based on application requirements&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Active Event&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Activity or transaction identified by the application of a business rule&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Active Access&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access the database in a mixed workload environment&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Active Workload Management Dynamically manage a mixed workload environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Performance - response time within seconds
• Scalability
  – large amounts of detailed data
  – mixed workloads (tactical and strategic) for mission critical applications
  – concurrent users
• Availability and Reliability - 7 x 24
• Data Freshness - accurate, up-to-the-minute data, including access to ODS data&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the_data_warehouse&quot;&gt;The Data Warehouse&lt;/h2&gt;

&lt;p&gt;A data warehouse is a central, enterprise-wide database that contains information extracted from the operational systems (this is where the saying, “Load once, use many” comes from).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Based on enterprise-wide model
Can begin small but may grow large rapidly
Populated by extraction/loading of data from operational systems
Responds to users &amp;quot;what if&amp;quot; queries
Minimizes data movement/synchronization
Provides a single view of the business&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;data_marts&quot;&gt;Data Marts&lt;/h2&gt;

&lt;p&gt;A data mart is a special purpose subset of data used by a particular department, function or application.&lt;/p&gt;

&lt;p&gt;Data mart types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;– Independent - created directly from operational systems to a separate physical data store
– Logical - exists as a subset of existing data warehouse via Views
– Dependent - created from data warehouse to a separate physical data store&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Teradata Study Notes-Introduction to the Teradata Database(1)</title>
   <link href="http://lionelcao.github.io/database/2014/01/19/tdnotes1"/>
   <updated>2014-01-19T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/database/2014/01/19/tdnotes1</id>
   <content type="html">&lt;p&gt;注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。&lt;/p&gt;

&lt;h2 id=&quot;module_1__teradata_database_overview&quot;&gt;Module 1 - Teradata Database Overview&lt;/h2&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what_is_the_teradata_database&quot;&gt;What is the Teradata Database?&lt;/h2&gt;

&lt;p&gt;Relational Database Management System关系型数据库&lt;/p&gt;

&lt;p&gt;Built on a Parallel Architecture建造于并行架构之上&lt;/p&gt;

&lt;p&gt;Supported Operating System:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft Windows Enterprise Server(Windows2000/2003 Server)
SuSE Linux(SLES 10 and 11)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O/S is open architecture&lt;/p&gt;

&lt;h2 id=&quot;teradata_parallel_architecture&quot;&gt;Teradata Parallel Architecture&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• Linear Scalability (10GB to 50+PB)线性可扩展
• Hashing provides automatic data distribution哈希提供自动数据分布
• ANSI Standard SQL - allows ad hoc queries,interface with BI tools and other databases支持ANSI标准SQL
• Parallel-Aware Optimizer并行感知优化器
• Single Administrative View单独管理界面&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;teradata_database_advantages&quot;&gt;Teradata Database Advantages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• Proven Linear Scalability - increased workload without decreased throughput
经过验证的线性可扩展性 - 增加负载量而并不减少吞吐量
• Most Concurrent Users - multiple complex queries
支持大量并发用户 - 多种复杂查询
• Unconditional Parallelism - sorts, aggregations and full-table scans are performed in parallel
无条件并行处理 - 排序，聚合以及全表扫描都并发处理
• Mature Optimizer - robust and parallel aware, handles complex queries, multiple joins per query, ad hoc processing
成熟的优化工具 - 强大且能够并行感知，处理复杂查询，每次查询的多个连接，即席处理 
• File System – manages data and disk space automatically and makes the rebuilding of indexes unnecessary
文件系统 - 自动管理数据和磁盘空间，不需要重建索引
• Low TCO - ease of setup and maintenance, robust parallel utilities, no re-orgs, automatic data distribution, low disk to data ratio, robust expansion utility
低总拥有成本 - 易于设置和维护，强大的并行实用程序，无需重新组织，数据自动分配，低磁盘数据比，强大的扩展功能 
• High Availability - no single point of failure, fault-tolerant architecture
高可用性 - 没有单点故障，容错体系结构 
• Single View of the Business - single database server for multiple clients
业务视角唯一 - 多个客户端访问同一个数据库服务器&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;teradata_database_manageability&quot;&gt;Teradata Database Manageability&lt;/h2&gt;

&lt;p&gt;Things Teradata Database Administrators never have to do!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• Reorganize data or index space
重新组织数据或索引的空间 
• Pre-allocate table or index space
预分配表或索引的空间 
• Physically format partitions or disk space
物理格式化，分区或磁盘空间
• Pre-prepare data for loading (convert, sort, split, etc.)
预先为数据加载做准备（转换，排序，分割等）
• Ensure that queries run in parallel
确保查询的并行运行 
• Unload/reload data spaces due to expansion
因扩容卸载/重装数据空间&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;teradata_database_features&quot;&gt;Teradata Database Features&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;• Designed to process large quantities of detail data
专为处理大量的明细数据而设计
• Ideal for data warehouse applications
适用于数据仓库应用程序
• Parallelism makes easy access to very large tables possible
并行架构使轻松访问大表变得可能
• Open architecture - uses industry standard components
开放式架构 - 采用业界标准组件
• Runs on industry standard Operating Systems
运行于业界标准的操作系统
• Performance increase is linear as components are added
性能的增长与组件增加线性相关
• Runs as a database server to client applications
对于客户端程序来说运行起来像是只有一个数据库服务器
• Runs on multiple hardware platforms (SMP) and Teradata hardware (MPP)
可运行于多种硬件平台（SMP）和Teradata硬件（MPP）&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：本文仅作个人学习笔记用，版权为Teradata公司所有，严禁转载。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Regular Expression</title>
   <link href="http://lionelcao.github.io/syntax/2014/01/13/regular-expression"/>
   <updated>2014-01-13T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/syntax/2014/01/13/regular-expression</id>
   <content type="html">&lt;p&gt;最近改写Data Retention的SQL，需要用到正则表达式来匹配querytext中的Date Condition。&lt;/p&gt;

&lt;p&gt;Teradata中也有正则表达式的系统函数，如REGEXP_SUBSTR等。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;regexp_substr&quot;&gt;REGEXP_SUBSTR&lt;/h2&gt;

&lt;h3 id=&quot;purpose&quot;&gt;Purpose&lt;/h3&gt;

&lt;p&gt;Extracts a substring from source_string that matches a regular expression specified by regexp_string. Regular Expression Tool &lt;a href=&quot;http://gskinner.com/RegExr/&quot;&gt;http://gskinner.com/RegExr/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;

&lt;p&gt;REGEXP_SUBSTR(Source_String,REGEXP_String,position_arg,occurrence_arg,match_arg)&lt;/p&gt;

&lt;p&gt;Source_String&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a character argument.
If source_string is NULL, NULL is returned.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;REGEXP_String&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a character argument.
If regexp_string is NULL, NULL is returned.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;position_arg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a numeric argument.
The position_arg specifies the position in the source_string from which to start searching (default is 1).
If the position_arg is greater than the input string length, NULL is returned.
If the position_arg is NULL, the default value (1) is used.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;occurrence_arg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a numeric argument.
The occurrence_arg specifies the number of the occurrence to be returned (default is 1). For example, if the occurrence_arg is 2, the function matches the first occurrence in source_string and starts searching from the character following the first occurrence in source_string for the second occurrence in source_string.
If the occurrence_arg is greater than the number of matches found, NULL is returned.
If occurrence_arg is NULL, the default value (1) is used.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;match_arg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a character argument.
Valid values are:
'i' = case-insensitive matching.
'c' = case sensitive matching.
'n' = the period character (match any character) can match the newline character.
'm' = source_string is treated as multiple lines instead of as a single line. With this option, the '^' and '$' characters apply to each line in source_string instead of the entire source_string.
'l' = if source_string exceeds the current maximum allowed source_string size (currently 16 MB), a NULL is returned instead of an error. This is useful for long-running queries where you do not want long strings causing an error that would make the query fail.
If the match_arg is not specified:
• The match is case sensitive.
• A period does not match the newline character.
• source_string is treated as a single line.
If there is no match, NULL is returned.
If match_arg is not valid, an error is returned.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前两个参数必需，后三个可以缺省，缺省值依次为1，1，’c’. 简单解释一下就是源字符串，正则表达式，从第几位字符起，取第几次出现的匹配字符串，以及大小写是否敏感等选项。&lt;/p&gt;

&lt;h3 id=&quot;argument_types_and_rules&quot;&gt;Argument Types and Rules&lt;/h3&gt;

&lt;p&gt;Expressions passed to this function must have the following data types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• source_string = CHAR, VARCHAR, or CLOB
• regexp_string = CHAR or VARCHAR (maximum size of 512 B)
• position_arg = NUMBER
• occurrence_arg = NUMBER
• match_arg = VARCHAR&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;result_type&quot;&gt;Result Type&lt;/h3&gt;

&lt;p&gt;REGEXP_SUBSTR is a scalar function whose return value data type depends on the data type associated with source_string input parameter that is passed into the function.&lt;/p&gt;

&lt;p&gt;A source_string of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;• CHAR, VARCHAR returns VARCHAR in the same character set as source_string.
• CLOB returns CLOB in the same character set as source_string.&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;example1&quot;&gt;Example1&lt;/h3&gt;

&lt;p&gt;The following query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT REGEXP_SUBSTR('mint chocolate chip', 'ch(i|o)p', 1, 1, 'c');&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns ‘chip’.&lt;/p&gt;

&lt;h3 id=&quot;example2&quot;&gt;Example2&lt;/h3&gt;

&lt;p&gt;The following query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT REGEXP_SUBSTR('mint chocolate chip chop', ' ch(i|o)p', 1, 2, 'i');&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns ‘chop’ because it is the second occurrence of the match.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下语法解释参考于维基百科&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;&quot;&gt;譯名問題&lt;/h2&gt;

&lt;p&gt;Regular Expression的「Regular」一般被譯為「正则」、「正規」、「常規」。此處的「Regular」即是「規則」、「規律」的意思，Regular Expression即「描述某種規則的表達式」之意。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;历史&lt;/h2&gt;

&lt;p&gt;最初的正则表达式出现于理论计算机科学的自动控制理论和形式化语言理论中。在这些领域中有对计算（自动控制）的模型和对形式化语言描述与分类的研究。 1940年，Warren McCulloch与Walter Pitts将神经系统中的神经元描述成小而简单的自动控制元。 1950年代，数学家斯蒂芬·科尔·克莱尼利用称之为「正则集合」的数学符号来描述此模型。肯·汤普逊将此符号系统引入编辑器QED，然后是Unix上的编辑器ed，并最终引入grep。自此，正則表达式被广泛地使用于各种Unix或者类似Unix的工具，例如Perl。&lt;/p&gt;

&lt;p&gt;Perl的正则表达式源自于Henry Spencer写的regex，它已经演化成了pcre（Perl兼容正则表达式，Perl Compatible Regular Expressions），一个由Philip Hazel开发的，为很多现代工具所使用的库。&lt;/p&gt;

&lt;p&gt;各计算机语言之间的正則表达式的整合目前开展的很差。未来的Perl6的子项目Apocalypse的设计中已考虑到了这点。&lt;/p&gt;

&lt;h2 id=&quot;_3&quot;&gt;理论&lt;/h2&gt;

&lt;p&gt;正则表达式可以用形式化语言理论的方式来表达。正则表达式由常量和算子组成，它们分别指示字符串的集合和在这些集合上的运算。给定有限字母表Σ定义了下列常量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(“空集”) ∅指示集合∅
(“空串”) ε指示集合{ε}
(“文字字符”)在Σ中的a指示集合{a}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义了下列运算：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(“串接”) RS指示集合{ αβ | α ∈ R，β ∈ S }。例如：{&amp;quot;ab&amp;quot;,&amp;quot;c&amp;quot;}{&amp;quot;d&amp;quot;,&amp;quot;ef&amp;quot;} = {&amp;quot;abd&amp;quot;, &amp;quot;abef&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;cef&amp;quot;}。
(“选择”) R|S指示R和S的并集。例如：{&amp;quot;ab&amp;quot;, &amp;quot;c&amp;quot;}|{&amp;quot;ab&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;ef&amp;quot;}= {&amp;quot;ab&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;ef&amp;quot;}
(“Kleene星号”) R* 指示包含ε并且闭包在字符串串接下的R的最小超集。这是可以通过R中的零或多个字符串的串接得到所有字符串的集合。例如，{&amp;quot;ab&amp;quot;, &amp;quot;c&amp;quot;}* = {ε, &amp;quot;ab&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;abab&amp;quot;, &amp;quot;abc&amp;quot;, &amp;quot;cab&amp;quot;, &amp;quot;cc&amp;quot;, &amp;quot;ababab&amp;quot;, ... }。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述常量和算子形成了克莱尼代数。&lt;/p&gt;

&lt;p&gt;很多课本使用对选择使用符号∪, +或∨替代竖杠。&lt;/p&gt;

&lt;p&gt;为了避免括号，假定Kleene星号有最高优先级，接着是串接，接着是并集。如果没有歧义则可以省略括号。例如，(ab)c可以写为abc而a|(b(c&lt;em&gt;))可以写为a|bc&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a|b*指示{ε, a, b, bb, bbb, ...}。

(a|b)*指示由包括空串、任意数目个a或b字符组成的所有字符串的集合。

ab*(c|ε)指示开始于一个a接着零或多个b和最终可选的一个c的字符串的集合。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正则表达式的定义非常精简，避免多余的量词?和+，它们可以被表达为：a+ = aa&lt;em&gt;和a? = (a|ε)。有时增加补算子~；~R指示在Σ&lt;/em&gt; 上的不在R中的所有字符串的集合。补算子是多余的，因为它使用其他算子来表达（尽管计算这种表示的过程是复杂的，而结果可能以指数增大）。&lt;/p&gt;

&lt;p&gt;这种意义上的正则表达式可以表达正则语言，精确的是可被有限状态自动机接受的语言类。但是在简洁性上有重要区别。某类正则语言只能用大小指数增长的自动机来描述，而要求的正则表达式的长度只线性的增长。&lt;/p&gt;

&lt;p&gt;正则表达式对应于乔姆斯基层级的类型-3文法。在另一方面，在正则表达式和不导致这种大小上的爆炸的非确定有限状态自动机（NFA）之间有简单的映射；为此NFA经常被用作正则表达式的替代表示。&lt;/p&gt;

&lt;p&gt;我们还要在这种形式化中研究表达力。如下面例子所展示的，不同的正则表达式可以表达同样的语言：这种形式化中存在着冗余。&lt;/p&gt;

&lt;p&gt;有可能对两个给定正则表达式写一个算法来判定它们所描述的语言是否本质上相等，简约每个表达式到极小确定有限自动机，确定它们是否同构（等价）。&lt;/p&gt;

&lt;p&gt;这种冗余可以消减到什么程度?我们可以找到仍有完全表达力的正则表达式的有趣的子集吗? Kleene星号和并集明显是需要的，但是我们或许可以限制它们的使用。这提出了一个令人惊奇的困难问题。因为正则表达式如此简单，没有办法在语法上把它重写成某种规范形式。过去公理化的缺乏导致了星号高度问题。最近Dexter Kozen用克莱尼代数公理化了正则表达式。&lt;/p&gt;

&lt;p&gt;很多现实世界的“正则表达式”引擎实现了不能用正则表达式代数表达的特征。&lt;/p&gt;

&lt;h2 id=&quot;_4&quot;&gt;基本语法&lt;/h2&gt;

&lt;p&gt;一個正则表达式通常被稱為一個模式（pattern），為用来描述或者匹配一系列符合某个句法规则的字符串。例如：Handel、Händel和Haendel這三个字符串，都可以由「Ha|ä|(ae)ndel」这个模式来描述。大部分正则表达式的形式都有如下的结构：&lt;/p&gt;

&lt;h3 id=&quot;_5&quot;&gt;选择&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;|竖直分隔符代表选择。例如「gray|grey」可以匹配grey或gray。&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;_6&quot;&gt;数量限定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;某个字符后的数量限定符用来限定前面这个字符允许出现的个数。最常见的数量限定符包括“+”、“?”和“*”（不加数量限定则代表出现一次且仅出现一次）：

+加号代表前面的字符必须至少出现一次。（1次、或多次）。例如，「goo+gle」可以匹配google、gooogle、goooogle等;

?问号代表前面的字符最多只可以出现一次。（0次、或1次）。例如，「colou?r」可以匹配color或者colour;

*星号代表前面的字符可以不出现，也可以出现一次或者多次。（0次、或1次、或多次）。例如，「0*42」可以匹配42、042、0042、00042等。&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;_7&quot;&gt;匹配&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;圆括号可以用来定义操作符的范围和优先度。例如，「gr(a|e)y」等价于「gray|grey」，「(grand)?father」匹配father和grandfather。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述这些构造子都可以自由组合，因此，「H(ae?|ä)ndel」和「H(a|ae|ä)ndel」是相同的。&lt;/p&gt;

&lt;p&gt;精确的语法可能因不同的工具或程序而异。&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;表达式全集&lt;/h2&gt;

&lt;p&gt;正则表达式有多種不同的风格。下表是在PCRE中元字符及其在正则表达式上下文中的行为的一个完整列表，适用于Perl或者Python编程语言（grep或者egrep的正则表达式文法是PCRE的子集）：&lt;/p&gt;
&lt;table bordercolor='#CCCCCC' cellspacing='0' border='2'&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\&lt;/th&gt;
&lt;td&gt;将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，「&lt;code&gt;n&lt;/code&gt;」匹配字符「&lt;code&gt;n&lt;/code&gt;」。「&lt;code&gt;\n&lt;/code&gt;」匹配一个换行符。序列「&lt;code&gt;\\&lt;/code&gt;」匹配「&lt;code&gt;\&lt;/code&gt;」而「&lt;code&gt;\(&lt;/code&gt;」则匹配「&lt;code&gt;(&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;^&lt;/th&gt;
&lt;td&gt;匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配「&lt;code&gt;\n&lt;/code&gt;」或「&lt;code&gt;\r&lt;/code&gt;」之后的位置。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;$&lt;/th&gt;
&lt;td&gt;匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配「&lt;code&gt;\n&lt;/code&gt;」或「&lt;code&gt;\r&lt;/code&gt;」之前的位置。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;*&lt;/th&gt;
&lt;td&gt;匹配前面的子表达式零次或多次。例如，zo*能匹配「&lt;code&gt;z&lt;/code&gt;」以及「&lt;code&gt;zoo&lt;/code&gt;」。*等价于{0,}。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;+&lt;/th&gt;
&lt;td&gt;匹配前面的子表达式一次或多次。例如，「&lt;code&gt;zo+&lt;/code&gt;」能匹配「&lt;code&gt;zo&lt;/code&gt;」以及「&lt;code&gt;zoo&lt;/code&gt;」，但不能匹配「&lt;code&gt;z&lt;/code&gt;」。+等价于{1,}。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;?&lt;/th&gt;
&lt;td&gt;匹配前面的子表达式零次或一次。例如，「&lt;code&gt;do(es)?&lt;/code&gt;」可以匹配「&lt;code&gt;do&lt;/code&gt;」或「&lt;code&gt;does&lt;/code&gt;」中的「&lt;code&gt;do&lt;/code&gt;」。?等价于{0,1}。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;}&lt;/th&gt;
&lt;td&gt;&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;是一个非负整数。匹配确定的&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;次。例如，「&lt;code&gt;o{2}&lt;/code&gt;」不能匹配「&lt;code&gt;Bob&lt;/code&gt;」中的「&lt;code&gt;o&lt;/code&gt;」，但是能匹配「&lt;code&gt;food&lt;/code&gt;」中的两个o。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;,}&lt;/th&gt;
&lt;td&gt;&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;是一个非负整数。至少匹配&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;次。例如，「&lt;code&gt;o{2,}&lt;/code&gt;」不能匹配「&lt;code&gt;Bob&lt;/code&gt;」中的「&lt;code&gt;o&lt;/code&gt;」，但能匹配「&lt;code&gt;foooood&lt;/code&gt;」中的所有o。「&lt;code&gt;o{1,}&lt;/code&gt;」等价于「&lt;code&gt;o+&lt;/code&gt;」。「&lt;code&gt;o{0,}&lt;/code&gt;」则等价于「&lt;code&gt;o*&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;,&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;}&lt;/th&gt;
&lt;td&gt;&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;和&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;均为非负整数，其中&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;&amp;lt;=&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;。最少匹配&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;次且最多匹配&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;次。例如，「&lt;code&gt;o{1,3}&lt;/code&gt;」将匹配「&lt;code&gt;fooooood&lt;/code&gt;」中的前三个o。「&lt;code&gt;o{0,1}&lt;/code&gt;」等价于「&lt;code&gt;o?&lt;/code&gt;」。请注意在逗号和两个数之间不能有空格。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;?&lt;/th&gt;
&lt;td&gt;当该字符紧跟在任何一个其他限制符（*,+,?，{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;}，{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;,}，{&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;,&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串「&lt;code&gt;oooo&lt;/code&gt;」，「&lt;code&gt;o+?&lt;/code&gt;」将匹配单个「&lt;code&gt;o&lt;/code&gt;」，而「&lt;code&gt;o+&lt;/code&gt;」将匹配所有「&lt;code&gt;o&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;.&lt;/th&gt;
&lt;td&gt;匹配除「&lt;code&gt;\&lt;/code&gt;&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;&lt;code&gt;n&lt;/code&gt;&lt;/span&gt;」之外的任何单个字符。要匹配包括「&lt;code&gt;\&lt;/code&gt;&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;&lt;code&gt;n&lt;/code&gt;&lt;/span&gt;」在内的任何字符，请使用像「&lt;code&gt;(.|\n)&lt;/code&gt;」的模式。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(pattern)&lt;/th&gt;
&lt;td&gt;匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括號字符，请使用「&lt;code&gt;\(&lt;/code&gt;」或「&lt;code&gt;\)&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(?:pattern)&lt;/th&gt;
&lt;td&gt;匹配pattern但不获取匹配的子字符串，也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用。这在使用或字符「&lt;code&gt;(|)&lt;/code&gt;」来组合一个模式的各个部分是很有用。例如「&lt;code&gt;industr(?:y|ies)&lt;/code&gt;」就是一个比「&lt;code&gt;industry|industries&lt;/code&gt;」更简略的表达式。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(?=pattern)&lt;/th&gt;
&lt;td&gt;正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，「&lt;code&gt;Windows(?=95|98|NT|2000)&lt;/code&gt;」能匹配「&lt;code&gt;Windows2000&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」，但不能匹配「&lt;code&gt;Windows3.1&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(?!pattern)&lt;/th&gt;
&lt;td&gt;正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如「&lt;code&gt;Windows(?!95|98|NT|2000)&lt;/code&gt;」能匹配「&lt;code&gt;Windows3.1&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」，但不能匹配「&lt;code&gt;Windows2000&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(?&amp;lt;=pattern)&lt;/th&gt;
&lt;td&gt;反向肯定预查，与正向肯定预查类似，只是方向相反。例如，「&lt;code&gt;(?&amp;lt;=95|98|NT|2000)Windows&lt;/code&gt;」能匹配「&lt;code&gt;2000Windows&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」，但不能匹配「&lt;code&gt;3.1Windows&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;(?&amp;lt;!pattern)&lt;/th&gt;
&lt;td&gt;反向否定预查，与正向否定预查类似，只是方向相反。例如「&lt;code&gt;(?&amp;lt;!95|98|NT|2000)Windows&lt;/code&gt;」能匹配「&lt;code&gt;3.1Windows&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」，但不能匹配「&lt;code&gt;2000Windows&lt;/code&gt;」中的「&lt;code&gt;Windows&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;x|y&lt;/th&gt;
&lt;td&gt;匹配x或y。例如，「&lt;code&gt;z|food&lt;/code&gt;」能匹配「&lt;code&gt;z&lt;/code&gt;」或「&lt;code&gt;food&lt;/code&gt;」。「&lt;code&gt;(z|f)ood&lt;/code&gt;」则匹配「&lt;code&gt;zood&lt;/code&gt;」或「&lt;code&gt;food&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;[xyz]&lt;/th&gt;
&lt;td&gt;字符集合（character class）。匹配所包含的任意一个字符。例如，「&lt;code&gt;[abc]&lt;/code&gt;」可以匹配「&lt;code&gt;plain&lt;/code&gt;」中的「&lt;code&gt;a&lt;/code&gt;」。特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;[^xyz]&lt;/th&gt;
&lt;td&gt;排除型（negate）字符集合。匹配未列出的任意字符。例如，「&lt;code&gt;[^abc]&lt;/code&gt;」可以匹配「&lt;code&gt;plain&lt;/code&gt;」中的「&lt;code&gt;plin&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;[a-z]&lt;/th&gt;
&lt;td&gt;字符范围。匹配指定范围内的任意字符。例如，「&lt;code&gt;[a-z]&lt;/code&gt;」可以匹配「&lt;code&gt;a&lt;/code&gt;」到「&lt;code&gt;z&lt;/code&gt;」范围内的任意小写字母字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;[^a-z]&lt;/th&gt;
&lt;td&gt;排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，「&lt;code&gt;[^a-z]&lt;/code&gt;」可以匹配任何不在「&lt;code&gt;a&lt;/code&gt;」到「&lt;code&gt;z&lt;/code&gt;」范围内的任意字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\b&lt;/th&gt;
&lt;td&gt;匹配一个单词边界，也就是指单词和空格间的位置。例如，「&lt;code&gt;er\b&lt;/code&gt;」可以匹配「&lt;code&gt;never&lt;/code&gt;」中的「&lt;code&gt;er&lt;/code&gt;」，但不能匹配「&lt;code&gt;verb&lt;/code&gt;」中的「&lt;code&gt;er&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\B&lt;/th&gt;
&lt;td&gt;匹配非单词边界。「&lt;code&gt;er\B&lt;/code&gt;」能匹配「&lt;code&gt;verb&lt;/code&gt;」中的「&lt;code&gt;er&lt;/code&gt;」，但不能匹配「&lt;code&gt;never&lt;/code&gt;」中的「&lt;code&gt;er&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\cx&lt;/th&gt;
&lt;td&gt;匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的「&lt;code&gt;c&lt;/code&gt;」字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\d&lt;/th&gt;
&lt;td&gt;匹配一个数字字符。等价于[0-9]。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\D&lt;/th&gt;
&lt;td&gt;匹配一个非数字字符。等价于[^0-9]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\f&lt;/th&gt;
&lt;td&gt;匹配一个换页符。等价于\x0c和\cL。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\n&lt;/th&gt;
&lt;td&gt;匹配一个换行符。等价于\x0a和\cJ。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\r&lt;/th&gt;
&lt;td&gt;匹配一个回车符。等价于\x0d和\cM。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\s&lt;/th&gt;
&lt;td&gt;匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\S&lt;/th&gt;
&lt;td&gt;匹配任何非空白字符。等价于[^ \f\n\r\t\v]。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\t&lt;/th&gt;
&lt;td&gt;匹配一个制表符。等价于\x09和\cI。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\v&lt;/th&gt;
&lt;td&gt;匹配一个垂直制表符。等价于\x0b和\cK。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\w&lt;/th&gt;
&lt;td&gt;匹配包括下划线的任何单词字符。等价于「&lt;code&gt;[A-Za-z0-9_]&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\W&lt;/th&gt;
&lt;td&gt;匹配任何非单词字符。等价于「&lt;code&gt;[^A-Za-z0-9_]&lt;/code&gt;」。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\x&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;匹配&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;，其中&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，「&lt;code&gt;\x41&lt;/code&gt;」匹配「&lt;code&gt;A&lt;/code&gt;」。「&lt;code&gt;\x041&lt;/code&gt;」则等价于「&lt;code&gt;\x04&amp;amp;1&lt;/code&gt;」。正則表达式中可以使用ASCII编码。.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;num&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;向后引用（back-reference）一个子字符串（substring），该子字符串与正则表达式的第num个用括号围起来的子表达式（subexpression）匹配。其中num是从1开始的正整数，其上限可能是99。例如：「&lt;code&gt;(.)\1&lt;/code&gt;」匹配两个连续的相同字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;标识一个八进制转义值或一个向后引用。如果\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;之前至少&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;个获取的子表达式，则&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为向后引用。否则，如果&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为八进制数字（0-7），则&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为一个八进制转义值。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;标识一个八进制转义值或一个向后引用。如果\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;之前至少有&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;个获得子表达式，则&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;为向后引用。如果\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;之前至少有&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;个获取，则&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为一个后跟文字&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;的向后引用。如果前面的条件都不满足，若&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;和&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m&lt;/span&gt;均为八进制数字（0-7），则\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;将匹配八进制转义值&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nml&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;如果&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;为八进制数字（0-3），且&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;m和l&lt;/span&gt;均为八进制数字（0-7），则匹配八进制转义值&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;nm&lt;/span&gt;l。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th style='text-align:center;'&gt;\u&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;&lt;/th&gt;
&lt;td&gt;匹配&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;，其中&lt;span style='font-family:Times New Roman; font-style:italic;'&gt;n&lt;/span&gt;是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;参考资料 1.&lt;a href=&quot;http://www.info.teradata.com/HTMLPubs/DB_TTU_14_00/index.html&quot;&gt;Teradata Documentations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考资料 2.&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>LIBNAME Statement Specifics for Teradata</title>
   <link href="http://lionelcao.github.io/tools/2013/12/20/saslibname"/>
   <updated>2013-12-20T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/tools/2013/12/20/saslibname</id>
   <content type="html">&lt;p&gt;Via &lt;a href=&quot;http://support.sas.com&quot;&gt;http://support.sas.com&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This section describes the LIBNAME statement that SAS/ACCESS Interface to Teradata supports and includes examples. For a complete description of this feature, see LIBNAME statement.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Here is the LIBNAME statement syntax for accessing Teradata.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LIBNAME libref teradata &amp;lt;connection-options&amp;gt; &amp;lt;LIBNAME-options&amp;gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;libref&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;specifies any SAS name that serves as an alias to associate SAS with a database, schema, server, or group of tables and views.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;teradata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;specifies the SAS/ACCESS engine name for the Teradata interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;connection-options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;provide connection information and control how SAS manages the timing and concurrence of the connection to the DBMS. Here are the connection options for the Teradata interface.&lt;/p&gt;

&lt;h3 id=&quot;userteradatausername__ldapidldap__ldapidldaprealmname&quot;&gt;USER=&amp;lt;’&amp;gt;Teradata-user-name&amp;lt;’&amp;gt; | &amp;lt;”&amp;gt;ldapid@LDAP&amp;lt;”&amp;gt; | &amp;lt;”&amp;gt;ldapid@LDAPrealm-name&amp;lt;”&amp;gt;&lt;/h3&gt;

&lt;p&gt;specifies a required connection option that specifies a Teradata user name. If the name contains blanks or national characters, enclose it in quotation marks. For LDAP authentication with either a NULL or single realm, append only the @LDAP token to the Teradata user name. In this case, no realm name is needed. If you append a realm name, the LDAP authentication server ignores it and authentication proceeds. However, if multiple realms exist, you must append the realm name to the @LDAP token. In this case, an LDAP server must already be configured to accept authentication requests from the Teradata server.&lt;/p&gt;

&lt;h3 id=&quot;passwordteradatapassword&quot;&gt;PASSWORD=&amp;lt;’&amp;gt;Teradata-password&amp;lt;’&amp;gt;&lt;/h3&gt;

&lt;p&gt;specifies a required connection option that specifies a Teradata password. The password that you specify must be correct for your USER= value. If the password contains spaces or nonalphanumeric characters, you must enclose it in quotation marks. If you do not want to enter your Teradata password in clear text on this statement, see PROC PWENCODE in the Base SAS Procedures Guide for a method for encoding it. For LDAP authentication, you use this password option to specify the authentication string or password. If the authentication string or password includes an embedded @ symbol, a backslash () is required and it must precede the @ symbol. See Teradata LIBNAME Statement Examples.&lt;/p&gt;

&lt;h3 id=&quot;accountaccount_id&quot;&gt;ACCOUNT=&amp;lt;’&amp;gt;account_ID&amp;lt;’&amp;gt;&lt;/h3&gt;

&lt;p&gt;is an optional connection option that specifies the account number that you want to charge for the Teradata session.&lt;/p&gt;

&lt;h3 id=&quot;tdpiddbcname&quot;&gt;TDPID=&amp;lt;’&amp;gt;dbcname&amp;lt;’&amp;gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alias: SERVER=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;specifies a required connection option if you run more than one Teradata server. TDPID= operates differently for network-attached and channel-attached systems, as described below.&lt;/p&gt;

&lt;p&gt;For NETWORK-ATTACHED systems (PC and UNIX), dbcname specifies an entry in your (client) HOSTS file that provides an IP address for a database server connection.&lt;/p&gt;

&lt;p&gt;By default, SAS/ACCESS connects to the Teradata server that corresponds to the dbccop1 entry in your HOSTS file. When you run only one Teradata server and your HOSTS file defines the dbccop1 entry correctly, you do not need to specify TDPID=.&lt;/p&gt;

&lt;p&gt;However, if you run more than one Teradata server, you must use the TDPID= option to specifying a dbcname of eight characters or less. SAS/ACCESS adds the specified dbcname to the login string that it submits to Teradata. (Teradata documentation refers to this name as the tdpid component of the login string.)&lt;/p&gt;

&lt;p&gt;After SAS/ACCESS submits a dbcname to Teradata, Teradata searches your HOSTS file for all entries that begin with the same dbcname. For Teradata to recognize the HOSTS file entry, the dbcname suffix must be COPx (x is a number). If there is only one entry that matches the dbcname, x must be 1. If there are multiple entries for the dbcname, x must begin with 1 and increment sequentially for each related entry. (See the example HOSTS file entries below.)&lt;/p&gt;

&lt;p&gt;When there are multiple, matching entries for a dbcname in your HOSTS file, Teradata does simple load balancing by selecting one of the Teradata servers specified for login. Teradata distributes your queries across these servers so that it can return your results as fast as possible.&lt;/p&gt;

&lt;p&gt;The TDPID= examples below assume that your HOSTS file contains these dbcname entries and IP addresses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    * Example 1: The TDPID= option is not specified, establishing a login to the Teradata server that runs at 10.25.20.34.dbccop1 10.25.20.34
    * Example 2: Using TDPID= myserver or SERVER=myserver, you specify a login to the Teradata server that runs at 130.96.8.207.myservercop1 130.96.8.207
    * Example 3: Using TDPID=xyz or SERVER=xyz, you specify a login to a Teradata server that runs at 11.22.33.44 or to a Teradata server that runs at 33.44.55.66.xyzcop1 33.44.55.66 or xyzcop2 11.22.33.44&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For CHANNEL-ATTACHED systems (z/OS), TDPID= specifies the subsystem name. This name must be TDPx, where x can be 0–9, A–Z (not case sensitive), or $, # or @. If there is only one Teradata server, and your z/OS system administrator has set up the HSISPB and HSHSPB modules, you do not need to specify TDPID=. For further information, see your Teradata TDPID documentation for z/OS.&lt;/p&gt;

&lt;h3 id=&quot;databasedatabasename&quot;&gt;DATABASE=&amp;lt;’&amp;gt;database-name&amp;lt;’&amp;gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alias: DB=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;specifies an optional connection option that specifies the name of the Teradata database that you want to access. This option enables you to view or modify a different user’s Teradata DBMS tables or views, if you have the required privileges. (For example, to read another user’s tables, you must have the Teradata privilege SELECT for that user’s tables.) If you do not specify DATABASE=, the libref points to your default Teradata database, which is often named the same as your user name. If the database value that you specify contains spaces or nonalphanumeric characters, you must enclose it in quotation marks.&lt;/p&gt;

&lt;h3 id=&quot;schemadatabasename&quot;&gt;SCHEMA=&amp;lt;’&amp;gt;database-name&amp;lt;’&amp;gt;&lt;/h3&gt;

&lt;p&gt;specifies an optional connection option that specifies the database name to use to qualify any database objects that the LIBNAME can reference.&lt;/p&gt;

&lt;h2 id=&quot;libnameoptions&quot;&gt;LIBNAME-options&lt;/h2&gt;

&lt;p&gt;define how SAS processes DBMS objects. Some LIBNAME options can enhance performance, and others determine locking or naming behavior. The following table describes the LIBNAME options for SAS/ACCESS Interface to Teradata, with the applicable default values. For more detail about these options, see LIBNAME Options for Relational Databases.&lt;/p&gt;

&lt;p&gt;SAS/ACCESS LIBNAME Options for Teradata&lt;/p&gt;
&lt;TABLE bordercolor='#333333' cellspacing='0' border='1'&gt;
 &lt;TR&gt;
    &lt;TH&gt;
       &lt;DIV&gt;&lt;A /&gt;Option
       &lt;/DIV&gt;
    &lt;/TH&gt;
    &lt;TH&gt;
       &lt;DIV&gt;&lt;A /&gt;Default Value
       &lt;/DIV&gt;
    &lt;/TH&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' class='firstRow' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n05764k5zha7vmn1o5jdawotulb2' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;ACCESS=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' class='firstRow' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n159pibn1z2n3cn1idoq4m6lnosl' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p04thgkccdvuzpn10uqmbaqhv71e' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;AUTHDOMAIN=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0k8ug9swejmqqn1wwew04s9etb1' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0z7rjsa56bdurn1qiugsoc1w5fj' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;BULKLOAD=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1mwcwh1ehyrutn18crjkfjwqcgr' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0xymhulmvfx0gn10od8y1s85ax2' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;CAST=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0r2eh74fh3f9gn1lu12l81747t2' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0qdvvcr2stqkan0zxm38p7fgs4i' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;CAST_OVERHEAD_MAXPERCENT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1jesfu37mzhk8n1f6622nbbiwaj' /&gt;20%
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1oo2kaka2oas9n19l7lwuwzk4gz' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;CONNECTION=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n12i0w0js77c1qn1o0yyw2s6fulu' /&gt;SHAREDREAD for channel-attached
          systems (&lt;NOBR&gt;z/OS&lt;/NOBR&gt;); UNIQUE for network attached systems (UNIX and PC platforms)
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p02ybusidxgybxn1me6aj22c7wb7' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;CONNECTION_GROUP=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n08th4dyizgk8xn1sltrqxr6g8co' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV&gt;&lt;A /&gt;DATABASE= (see &lt;SPAN class='xrefSee'&gt;&lt;A&gt;SCHEMA=&lt;/A&gt;&lt;/SPAN&gt;)
       &lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0xq80qssa4kcxn1vf1hl076mbsw' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0xy3up1eow6i9n1jq9zvo95b6ia' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBCOMMIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n08cn7l3d1r3lxn1lzmelep86eut' /&gt;1000 when inserting
          rows; 0 when updating rows
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1cs45i0jjgzi3n1mink44ngoma6' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBCONINIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1af5t2uccgeajn16md7ijxbe49l' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0namyl2zihpcon1s9b6poi8zrbv' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBCONTERM=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1jnvz1of6wj8on1i5ormdv5fcr6' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1iazm2vn71n0dn1f71wrdo6vrpb' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBCREATE_TABLE_OPTS=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0zixt1051tro0n0za9bhik42xn1' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1wak7nryeed7cn1bxtf8z98t7i9' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBGEN_NAME=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n16p7fs2inkiwln1gxoki35i8tgv' /&gt;DBMS
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1g87xuya1s575n1q8cm9y6cs7ru' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBINDEX=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0xffoorzjo6hjn1rxhp6n6weawr' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0ydlawoa7n1han15kt49tatd64z' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBLIBINIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n015g55d63l01cn1clrluw5mt0x9' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0cbefs3pkyex9n1s4x12okrhvkv' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBLIBTERM=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0zuc7cnt2s4jzn13g7r9j0p9c5m' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1dsjqnbad2cq7n162x6pjh0cuep' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBMSTEMP=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1gpbpy0r1eh54n1pmb4zydoouz7' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p07uz46ts55fl1n0zvty9ph1mc1w' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBPROMPT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1u506kke3v4tjn1plev9gdw6qaf' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p05c33q85ro00xn0zx1emeylqa82' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBSASLABEL=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p08z4k3gsjx8mqn1jwisiymrogza' /&gt;COMPAT
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1s2wla9zvshlwn15z1g4ijnyebd' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DBSLICEPARM=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p12vpxsmirfz2en13vetbgfgsh8e' /&gt;THREADED_APPS,2
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p17tpp9asfmhgnn15zw0g4ng0gui' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DEFER=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p00u7vo9jvz748n1d5fuuylhsype' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0ooadnft4qlkpn1drmhgikdyo1s' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DIRECT_EXE=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1p8u8whcw3d79n1pdhxo4fqnq3r' /&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1p0x258ry7e3gn1n9mn1ceijtht' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;DIRECT_SQL=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0ny6mm1yyxq4vn1w017yqauzsiy' /&gt;YES
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1t5j3eynzk5lgn1r30b5e1jka09' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;ERRLIMIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0uuwcwbopb6j3n1l71cqnzp1e4c' /&gt;1 million
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0n3liw9gv20han1vabvlrls7lsw' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;FASTEXPORT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1qtbqoakwbhxen1xim87tn0dlg9' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1v7zvniu4kkqxn1x0g5icd8revq' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;LOGDB=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0uz4z24witoi9n1sh2dg2wk7opv' /&gt;Default Teradata database
          for the libref
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1ou8oc2zbuop2n1xbu2z1npq8n1' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;MODE=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p059eyvz169q7bn1f2cudtsrcgnd' /&gt;ANSI
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n13m2v7iioilifn0zvr8gfhhtsvo' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;MULTISTMT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0maqasjudow9dn1239cgfw4q9dn' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n02z5rj1vxeg77n1d1u572hpqw70' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;MULTI_DATASRC_OPT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0whyrkxd4br9zn1t41pptomywzh' /&gt;IN_CLAUSE
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1d3f5xmymtitpn19r9m7dzohv8n' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;PREFETCH=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n09ra3fbud6ul2n1l2ak78qn4qk0' /&gt;not enabled
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1953u6lq6okn1n12918vrrxommk' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;PRESERVE_COL_NAMES=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1bvo5m0kuiz93n1nh8o1jrft7sk' /&gt;YES
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1fv0x5twixip4n15ooervnrh5ry' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;PRESERVE_TAB_NAMES=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1j7gath667iwln18n66oa4566tq' /&gt;YES
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n19tqfynmyefjin174lkyg2vjjiz' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;QUERY_BAND=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1rw1xdqvlf43gn1hqnconzh8s6x' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0o3a7j4g3tnw0n1vttljf3ir8xk' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;READ_ISOLATION_LEVEL=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1uhqvxaf4ehffn1r1bnv28nimxi' /&gt;see &lt;SPAN class='xrefSee'&gt;&lt;A&gt;Locking in the Teradata Interface&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1mf0qk6b7rzj9n1bnlpnc5y336v' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;READ_LOCK_TYPE=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1nfy3ct8o6lqen167pq29vxj3ma' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0mdc49xmyckohn1hq7v6p2xydst' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;READ_MODE_WAIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1jyatir45qeg6n14ozhwdslvx41' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n13hep1c1oe1vwn1cfw3m6am1egz' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;REREAD_EXPOSURE=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1vxg2q05iin7in1dj1931j3cj7k' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n02hgwka1a09kon1exf7dh6q1km0' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SCHEMA=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0kzhizymixo7an1eacrsoo0rk71' /&gt;your default Teradata
          database
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p15xjlnfnkzgxcn11c3vz3lnjx24' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SESSIONS=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1lpbyhx22dtuvn1tstrnw41z10c' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n15zo8cx2uu8b2n1blqc9hf52oh8' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SLEEP=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1ggidfblrcfiqn1fsw2m8plnv8q' /&gt;6
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1vpmrub4a4idmn1fm71l8aej6en' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SPOOL=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1j25qsbv5yjmkn1hxi9ee1m0edf' /&gt;YES
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1pt58gk0fuay5n1ey9i602n1yr3' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SQL_FUNCTIONS=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1e1clxw1g0gugn19hefh6bdhzo4' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0e2zg18u1be44n1uofv0drtom3f' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SQL_FUNCTIONS_COPY=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1mjek46z8zs60n1vk0lopz9y6t1' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p17byu2ejgvvatn1f0lqe1jzdayb' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;SQLGENERATION=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n096nff715dosln1cc2fhupm1o0d' /&gt;DBMS
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0ybaqwwpn1rsqn17jpogamji8ot' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;TEMPORAL_QUALIFIER=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1sjzszzk30vycn1v1eqw9z36wee' /&gt;CURRENT VALIDTIME for
          valid-time column; CURRENT TRANSACTIONTIME for transaction-time column
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0xeyfrddyp9yen10gc18sh9rqwi' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;TENACITY=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1hao6h1a0yh03n1lz3p93d5mpv8' /&gt;0 for FastLoad; 4 for
          FASTEXPORT= and MultiLoad
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1fu0x74em7qapn1t0h4yajb6g4l' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;TPT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0kl8q7my6g9jin17e6y7i6ns7jo' /&gt;YES
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1i8eb6x75dd5nn1vgjnwgpn1my1' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;TR_ENABLE_INTERRUPT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0y4i9u6j3ac90n1ruuerhxpascr' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0phqtcbiwqk2yn1mfp8yvprgp9v' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;UPDATE_ISOLATION_LEVEL=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p1k591s6p5j9lmn1k4e3p39kuyp5' /&gt;see &lt;SPAN class='xrefSee'&gt;&lt;A&gt;Locking in the Teradata Interface&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p14y1a50swckx1n1x9v1u4mygdjk' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;UPDATE_LOCK_TYPE= LIBNAME Option&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n1ud17uh6dfoe8n1l5rxexidzswb' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p0f9ikxt2l823ln1b9ssf75ujxfn' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;UPDATE_MODE_WAIT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n0vypcgdhtrr2on1ax5tbb6eqtxy' /&gt;none
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;TR&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='n070psk70999qin167hupbp0a24m' /&gt;&lt;SPAN class='xrefSee'&gt;&lt;A&gt;UTILCONN_TRANSIENT=&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;
    &lt;/TD&gt;
    &lt;TD style='text-align: left' valign='top'&gt;
       &lt;DIV class='paraTableFirst'&gt;&lt;A name='p047pnwd1a4yqrn1emjq3byouzzw' /&gt;NO
       &lt;/DIV&gt;
    &lt;/TD&gt;
 &lt;/TR&gt;
 &lt;/TABLE&gt;&lt;hr /&gt;
&lt;h2 id=&quot;teradata_libname_statement_examples&quot;&gt;Teradata LIBNAME Statement Examples&lt;/h2&gt;

&lt;p&gt;These examples show how to make the proper connection by using the USER= and PASSWORD= connection options. Teradata requires these options, and you must use them together.&lt;/p&gt;

&lt;p&gt;This example shows how to connect to a single or NULL realm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libname x teradata user=”johndoe@LDAP” password=”johndoeworld”;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of how to make the connection to a specific realm where multiple realms are configured.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libname x teradata user=”johndoe@LDAPjsrealm” password=”johndoeworld”;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of a configuration with a single or NULL realm that contains a password with an embedded @ symbol. The password must contain a required backslash (), which must precede the embedded @ symbol.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libname x teradata user=&amp;quot;johndoe@LDAP&amp;quot; password=&amp;quot;johndoe\@world&amp;quot;&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>JQuery的3种$()</title>
   <link href="http://lionelcao.github.io/web/2013/12/18/jquery3"/>
   <updated>2013-12-18T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/web/2013/12/18/jquery3</id>
   <content type="html">&lt;h3 id=&quot;1_cssxpathhtml&quot;&gt;1. $()可以是&lt;code&gt;$(expresion)&lt;/code&gt;，即css选择器、Xpath或html元素，也就是通过上述表达式来匹配目标元素。&lt;/h3&gt;

&lt;p&gt;比如：&lt;code&gt;$(&amp;quot;a&amp;quot;)&lt;/code&gt;构造的这个对象，是用CSS选择器构建了一个jQuery对象——它选择了所有的&lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt;这个标签。如：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;    $(&amp;quot;a&amp;quot;).click(function(){...})&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就是在点击页面上的任何一个链接时的触发事件。确切地说，就是jQuery用&lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt;这个标签构建了一个对象&lt;code&gt;$(&amp;quot;a&amp;quot;)&lt;/code&gt;，函数 &lt;code&gt;click()&lt;/code&gt;是这个jQuery对象的一个（事件）方法。&lt;/p&gt;

&lt;p&gt;比如有这样一段HTML代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;p&amp;gt;one&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;two&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;three&amp;lt;/p&amp;gt;
    &amp;lt;a href=&amp;quot;#&amp;quot; id=&amp;quot;test&amp;quot; onClick=&amp;quot;jq()&amp;quot; &amp;gt;jQuery&amp;lt;/a&amp;gt; &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而操作这段HTML的是如下一条语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    alert($(&amp;quot;div&amp;gt;p&amp;quot;).html());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$()中的是一个查询表达式，也就是用“div&amp;gt;p”这样一个查询表达式构建了一个jQuery对象，然后的&lt;code&gt;“html()”&lt;/code&gt;意思是显示其html内容，也就是上面HTML代码段的&lt;code&gt;[two]&lt;/code&gt;。再如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $(&amp;quot;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;).appendTo(&amp;quot;body&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$()中的是一个字符串，用这样一段字串构建了jQuery对象，然后向&lt;body /&gt;中添加这一字串。&lt;/p&gt;

&lt;h3 id=&quot;2_domdomdocumentlocationform&quot;&gt;2. $()可以是&lt;code&gt;$(element)&lt;/code&gt;，即一个特定的DOM元素。如常用的DOM对象有document、location、form等。如这样一行代码：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    $(document).find(&amp;quot;div&amp;gt;p&amp;quot;).html());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$()中的document是一个DOM元素，即在全文寻找带&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;的&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素，并显示&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;中的内容。&lt;/p&gt;

&lt;h3 id=&quot;3_&quot;&gt;3. $()可以是&lt;code&gt;$(function)&lt;/code&gt;，即一个函数，它是&lt;code&gt;$(document).ready()&lt;/code&gt;的一个速记方式。如常见的形式是这样的：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    $(document).ready(function(){
    alert(&amp;quot;Hello world!&amp;quot;);
    });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可变形作： $(function(){ alert(“Hello world!”); });&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;htmlelementsjquery&quot;&gt;对于选择HTML文档中的elements，jQuery有两种方法：&lt;/h2&gt;

&lt;h3 id=&quot;1_&quot;&gt;1. 如&lt;code&gt;$(&amp;quot;div&amp;gt;ul a&amp;quot;)&lt;/code&gt;，它的意思是&lt;code&gt;div&lt;/code&gt;标签中的&lt;code&gt;ul&lt;/code&gt;标签中的&lt;code&gt;a&lt;/code&gt;标签。不过，&lt;code&gt;$('div&amp;gt;ul')&lt;/code&gt;和&lt;code&gt;$('div ul')&lt;/code&gt;是有区别的，&lt;code&gt;$('div&amp;gt;ul')&lt;/code&gt;是&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的直接后代里找&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;；而&lt;code&gt;$('div ul')&lt;/code&gt;是在&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的所有后代里找&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;。&lt;/h3&gt;

&lt;h3 id=&quot;2_jquery&quot;&gt;2. 用jQuery对象的几个方法（如方法&lt;code&gt;find()&lt;/code&gt;、&lt;code&gt;each()&lt;/code&gt;等）&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$(&amp;quot;#orderedlist).find(&amp;quot;li&amp;quot;) &lt;/code&gt;就像 &lt;code&gt;$(&amp;quot;#orderedlist li&amp;quot;). each()&lt;/code&gt;一样迭代了所有的li，而表达式中的“#”表示HTML中的ID，如上例中的“#orderedlist”就表示“ID为orderedlist所在的标签”。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;1_id&quot;&gt;1. 标签选择器&lt;code&gt;$('p')&lt;/code&gt;、类选择器&lt;code&gt;$('.myClass')&lt;/code&gt;、id选择器&lt;code&gt;$('#myId')&lt;/code&gt;相对简单，不多说。不过有一点——&lt;code&gt;$('div&amp;gt;ul')&lt;/code&gt;和&lt;code&gt;$('div ul')&lt;/code&gt;是有区别的，&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$('div&amp;gt;ul')&lt;/code&gt;是&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的直接后代里找&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;；而&lt;code&gt;$('div ul')&lt;/code&gt;是在&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的所有后代里找&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以，&lt;code&gt;$('#sId&amp;gt;li')&lt;/code&gt;所选择的是id为&lt;code&gt;&amp;quot;sId&amp;quot;&lt;/code&gt;的所有&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;孩子节点，即使这个&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;的后代还有&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;也不是它所找的范围（所找到的DOM对象，只是它本级的DOM对象。）。而&lt;code&gt;$('#sId li:not(.horizontal)')&lt;/code&gt;，就是指类名&lt;code&gt;&amp;quot;sId&amp;quot;&lt;/code&gt;里面的所有&lt;code&gt;li&lt;/code&gt;的子孙中没有horizontal类的所有元素。——这里的&lt;code&gt;not()&lt;/code&gt;是一个negation pseudo class.&lt;/p&gt;

&lt;p&gt;这里返回的是一个jQurey对象，一个数组对象，这个jQuery对象的长度可用&lt;code&gt;.length()&lt;/code&gt;得到。&lt;/p&gt;

&lt;h3 id=&quot;2_xpath&quot;&gt;2. XPath选择器&lt;/h3&gt;

&lt;p&gt;如：选择所有带有title 属性的链接，我们会这样写：&lt;code&gt;$('a[@title]')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;里带&lt;code&gt;@&lt;/code&gt;，说明&lt;code&gt;[]&lt;/code&gt;里的是元素的属性；是个属性选择器&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;里没&lt;code&gt;@&lt;/code&gt;，说明&lt;code&gt;[]&lt;/code&gt;里的是元素的子孙。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$('ul li')&lt;/code&gt;和&lt;code&gt;$('ul[li]')&lt;/code&gt;虽然返回的都是一个jQuery数组，但两者的含义正好相反。前者是要找&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;下所有&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;子孙，而后者却是在找所有子孙为&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;的&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;数组。&lt;/p&gt;

&lt;p&gt;在XPath中，要找一个“以…开头”的属性，用&lt;code&gt;^=&lt;/code&gt;，如找一个name属性是以mail开头的input元素，就用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $('input[@name^=&amp;quot;mail&amp;quot;]')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要找一个“以…结尾”的属性，要用&lt;code&gt;$=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;要找一个“不头不尾”的属性，用&lt;code&gt;*=&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;3_cssxpath&quot;&gt;3. 不属于上述的CSS和XPath的选择器，就是自定义的选择器了，用&lt;code&gt;“:”&lt;/code&gt;表示&lt;/h3&gt;

&lt;p&gt;这里要用的就是&lt;code&gt;:first&lt;/code&gt;，&lt;code&gt;:last&lt;/code&gt;，&lt;code&gt;:parent&lt;/code&gt; ，&lt;code&gt;:hidden&lt;/code&gt;，&lt;code&gt;:visible&lt;/code&gt;，&lt;code&gt;:odd&lt;/code&gt;，&lt;code&gt;:even&lt;/code&gt;，&lt;code&gt;:not('xxx')&lt;/code&gt;， &lt;code&gt;&amp;quot;:eq(0)&amp;quot;&lt;/code&gt;（始于0)，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:nth(n&lt;/code&gt;，&lt;code&gt;:gt(0)&lt;/code&gt;，&lt;code&gt;:lt(0)&lt;/code&gt;，&lt;code&gt;:contains(&amp;quot;xxx&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如：&lt;code&gt;$('tr:not([th]):even')&lt;/code&gt;意为&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;元素的子孙中不含&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;的所有子孙的偶数项。&lt;/p&gt;

&lt;h3 id=&quot;4_&quot;&gt;4. 还有几个，简单不解释了&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    $('th').parent()——
    $('td:contains(&amp;quot;Henry&amp;quot;)').prev()——内容包含有&amp;quot;Henry&amp;quot;的&amp;lt;td&amp;gt;的上一个节点
    $('td:contains(&amp;quot;Henry&amp;quot;)').next()——内容包含有&amp;quot;Henry&amp;quot;的&amp;lt;td&amp;gt;的下一个节点
    $('td:contains(&amp;quot;Henry&amp;quot;)').siblings()——内容包含有&amp;quot;Henry&amp;quot;的&amp;lt;td&amp;gt;的所有兄弟节点&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一个，就是&lt;code&gt;end()&lt;/code&gt;，这个方法肯定是用在某个DOM节点执行了某一动作之后，还想在与其相关的节点上执行类似动作，这里就要用到&lt;code&gt;end()&lt;/code&gt;。用过&lt;code&gt;end()&lt;/code&gt;方法之后，所返回的是执行动作的那个节点的父节点上。举个例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $(...).parent().find(...).addClass().end()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里执行动作的节点是&lt;code&gt;find(...)&lt;/code&gt;，是一个数组对象，它所做的动作是&lt;code&gt;“addClass()”&lt;/code&gt;，之后，用了个&lt;code&gt;end()&lt;/code&gt;，这时所返回的东东就是指向了&lt;code&gt;parent()&lt;/code&gt;所指向的节点，也就是执行&lt;code&gt;“addClass()”&lt;/code&gt;动作的那个数组对象的父节点。&lt;/p&gt;

&lt;h3 id=&quot;5_dom&quot;&gt;5. 要直接访问DOM元素，可用&lt;code&gt;get(0)&lt;/code&gt;的方法，如&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    $('#myelement').get(0)，也可缩写成$('#myelement')[0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：本文转载自&lt;a href=&quot;http://www.jb51.net/article/21660.htm&quot;&gt;http://www.jb51.net/article/21660.htm&lt;/a&gt;，格式内容稍有修改。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ubuntu下配置免密码登录本机（ssh localhost）</title>
   <link href="http://lionelcao.github.io/linux/2013/12/15/sshlocalhost"/>
   <updated>2013-12-15T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/linux/2013/12/15/sshlocalhost</id>
   <content type="html">&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu下配置免密码登录本机方法如下:&lt;/h3&gt;
&lt;!-- more --&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成密钥&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ssh keygen -t rsa&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全部默认回车&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;将公钥添加到信任列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ cd .ssh/
 $ cat id_rsa.pub &amp;gt;&amp;gt; authorized_key&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;验证无密码登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ssh localhost&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a) 出现报错&lt;code&gt;ssh : connect to host localhost port 22:Connection refused&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;错误原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sshd&lt;/code&gt; 未安装&lt;/li&gt;

&lt;li&gt;&lt;code&gt;sshd&lt;/code&gt; 未启动&lt;/li&gt;

&lt;li&gt;防火墙&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt; $ ps aux|grep ssh
 $ ssh net start sshd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处为发现没有安装sshd，因此需要安装openssh-server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ sudo apt-get install openssh-server&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完再次验证ssh localhost返回正确信息。&lt;/p&gt;

&lt;p&gt;b) 正确信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Welcome to Ubuntu 12.04.3 LTS (GNU/Linux 3.8.0-29-generic x86_64)
 
 * Documentation:  https://help.ubuntu.com/
 
 200 packages can be updated.
 104 updates are security updates.

 Last login: Tue Dec 17 22:57:25 2013 from localhost&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注：本文部分内容参考网络资料&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ubuntu下安装JDK</title>
   <link href="http://lionelcao.github.io/java/2013/12/14/ubuntuinsjdk"/>
   <updated>2013-12-14T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/java/2013/12/14/ubuntuinsjdk</id>
   <content type="html">&lt;p&gt;Ubuntu : 12.04&lt;/p&gt;

&lt;p&gt;JDK: jdk-7u45-linux-x64.tar.gz&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从Oracle官网下载JDK。将jdk-7u45-linux-x64.tar.gz拷贝到/usr/lib/jdk/目录下面，这里如果没有jdk文件夹，则创建该文件夹:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cd /usr/lib
  $ sudo mkdir jdk
  $ sudo mv  ~/Downloads/jdk-7u45-linux-x64.tar.gz  /usr/lib/jdk/   //把下载的文件拷贝到新创建的目录下面
  $ sudo tar -zxvf jdk-7u45-linux-x64.tar.gz   //解压缩文件&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Change Profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ sudo gedit /etc/profile

  export JAVA_HOME=/usr/lib/jdk/jdk1.7.0_45      //加在最后
  export JRE_HOME=/usr/lib/jdk/jdk1.7.0_45/jre
  export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH
  export CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;将系统默认的jdk修改过来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ sudo update-alternatives --install /usr/bin/java java /usr/lib/jdk/jdk1.7.0_45/bin/java 300
  $ sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jdk/jdk1.7.0_45/bin/javac 300
  $ sudo update-alternatives --config java
  $ sudo update-alternatives --config javac&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;验证Java版本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ java -version
  java version &amp;quot;1.7.0_45&amp;quot;
  Java(TM) SE Runtime Environment (build 1.7.0_45-b18)
  Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>博客功能更新（二）</title>
   <link href="http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/14/blogupdate2"/>
   <updated>2013-12-14T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/14/blogupdate2</id>
   <content type="html">&lt;p&gt;家里的机器上的&lt;code&gt;Ubuntu&lt;/code&gt;一直卡死，基本上每次用半个小时就这样。一直以为是上次手动移动虚拟机文件造成的，结果重新安装了一个还是这样。今天把内存从2G改成4G就好了，于是下午改博客的时候&lt;code&gt;top&lt;/code&gt;了一下，Memory果然超过了2G。光一个&lt;code&gt;Firefox&lt;/code&gt;就吃掉1G多 ，汗死～&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;今天更新了博客的几个小地方：&lt;/h3&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;1. 将Links页更新为_config.yml+html文件中通过ruby调用，同样的方法用在导航栏上实现了标签排序。
   之前用了一个别人开发的排序插件结果导致导航栏直接消失不见了，但在本地jekyll serve却能看到。诡异的问题，还是自己修改比较靠谱。
2. 将Categories,Tags,Archive合并成为一个下拉菜单，并调整了css以修改默认外观。
   由于用的是bootstrap模板，在官网查了下文档，改起来还是比较方便的。修改bootstrap.min.css文件打开太容易卡死，直接怒把
   default.html中引用换成bootstrap.css。&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;_2&quot;&gt;下一个版本准备做的事：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1. 增加回到顶部功能。对于长篇的博客来说，鼠标滚轮实在太吃力了，所以增加一个BackTop吧！
2. 导航栏锁定，屏幕向下滚动的时候保持导航栏锁定在屏幕顶部以方便切换。&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Markdown语法</title>
   <link href="http://lionelcao.github.io/syntax/2013/12/11/markdown"/>
   <updated>2013-12-11T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/syntax/2013/12/11/markdown</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Simplelified Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot;&gt;查看这里&lt;/a&gt; 。」–By &lt;a href=&quot;http://twitter.com/riku&quot;&gt;@riku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/&quot;&gt;GitCafe&lt;/a&gt;上，请通过”派生”和”合并请求”来帮忙改进本项目。&lt;/p&gt;

&lt;p&gt;Markdown 语法说明 (简体中文版)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;宗旨&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;特殊字符自动转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#block&quot;&gt;区块元素&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;段落和换行&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#header&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;代码区块&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;分隔线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#span&quot;&gt;区段元素&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;强调&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#misc&quot;&gt;其它&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;反斜杠&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;自动链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#acknowledgement&quot;&gt;感谢&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#editor&quot;&gt;Markdown 免费编辑器&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;&lt;h2 id='overview'&gt;概述&lt;/h2&gt;&lt;h3 id='philosophy'&gt;宗旨&lt;/h3&gt;
&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;a href=&quot;http://wowubuntu.com/markdown/basic.html&quot;&gt;点击查看快速入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt;、&lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;、&lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;Textile&lt;/a&gt;、&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt;、&lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;Grutatext&lt;/a&gt; 和 &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;EtText&lt;/a&gt;，而最大灵感来源其实是纯文本电子邮件的格式。&lt;/p&gt;

&lt;p&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;
&lt;h3 id='html'&gt;兼容 HTML&lt;/h3&gt;
&lt;p&gt;Markdown 语法的目标是：成为一种适用于网络的&lt;em&gt;书写&lt;/em&gt;语言。&lt;/p&gt;

&lt;p&gt;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想&lt;em&gt;不是&lt;/em&gt;要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种&lt;em&gt;发布&lt;/em&gt;的格式，Markdown 是一种&lt;em&gt;书写&lt;/em&gt;的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。&lt;/p&gt;

&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。&lt;/p&gt;

&lt;p&gt;要制约的只有一些 HTML 区块元素――比如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;例子如下，在 Markdown 文件里加上一段 HTML 表格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的&lt;code&gt;*强调*&lt;/code&gt;会没有效果。&lt;/p&gt;

&lt;p&gt;HTML 的区段（行内）标签如 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。&lt;/p&gt;

&lt;p&gt;和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。&lt;/p&gt;
&lt;h3 id='autoescape'&gt;特殊字符自动转换&lt;/h3&gt;
&lt;p&gt;在 HTML 文件中，有两个字符需要特殊处理： &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号用于起始标签，&lt;code&gt;&amp;amp;&lt;/code&gt; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt;code&gt;&amp;amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 字符尤其让网络文档编写者受折磨，如果你要打「&lt;code&gt;AT&amp;amp;T&lt;/code&gt;」 ，你必须要写成「&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;」。而网址中的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符也要转换。比如你要链接到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须要把网址转换写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;才能放到链接标签的 &lt;code&gt;href&lt;/code&gt; 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。&lt;/p&gt;

&lt;p&gt;Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &lt;code&gt;&amp;amp;amp&lt;/code&gt;;。&lt;/p&gt;

&lt;p&gt;所以你如果要在文档中插入一个版权符号 &lt;code&gt;©&lt;/code&gt;，你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;copy;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会保留它不动。而若你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;T&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 就会将它转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的状况也会发生在 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号上，因为 Markdown 允许 &lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt; ，如果你是把 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;lt; 5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 将会把它转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;amp;lt; 5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过需要注意的是，code 范围内，不论是行内还是区块， &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 两个符号都&lt;em&gt;一定&lt;/em&gt;会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）&lt;/p&gt;
&lt;hr /&gt;&lt;h2 id='block'&gt;区块元素&lt;/h2&gt;&lt;h3 id='p'&gt;段落和换行&lt;/h3&gt;
&lt;p&gt;一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。&lt;/p&gt;

&lt;p&gt;「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;如果你&lt;em&gt;确实&lt;/em&gt;想要依赖 Markdown 来插入 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签的话，在插入处先按入两个以上的空格然后回车。&lt;/p&gt;

&lt;p&gt;的确，需要多费点事（多加空格）来产生 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; ，但是简单地「每个换行都转换为 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 &lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt; 和多段落的 &lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt; 在使用换行来排版的时候，不但更好用，还更方便阅读。&lt;/p&gt;
&lt;h3 id='header'&gt;标题&lt;/h3&gt;
&lt;p&gt;Markdown 支持两种标题的语法，类 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和类 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。&lt;/p&gt;

&lt;p&gt;类 Setext 形式是用底线的形式，利用 &lt;code&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code&gt;-&lt;/code&gt; （第二阶标题），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is an H1
=============

This is an H2&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;任何数量的 &lt;code&gt;=&lt;/code&gt; 和 &lt;code&gt;-&lt;/code&gt; 都可以有效果。&lt;/p&gt;

&lt;p&gt;类 Atx 形式则是在行首插入 1 到 6 个 &lt;code&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1

## 这是 H2

###### 这是 H6&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 &lt;code&gt;#&lt;/code&gt;，而行尾的 &lt;code&gt;#&lt;/code&gt; 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='blockquote'&gt;区块引用 Blockquotes&lt;/h3&gt;
&lt;p&gt;Markdown 标记区块引用是使用类似 email 中用 &lt;code&gt;&amp;gt;&lt;/code&gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt; 
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ## 这是一个标题。
&amp;gt; 
&amp;gt; 1.   这是第一行列表项。
&amp;gt; 2.   这是第二行列表项。
&amp;gt; 
&amp;gt; 给出一些例子代码：
&amp;gt; 
&amp;gt;     return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择&lt;em&gt;增加引用阶层&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id='list'&gt;列表&lt;/h3&gt;
&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;

&lt;p&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Red
*   Green
*   Blue&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+   Red
+   Green
+   Blue&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-   Red
-   Green
-   Blue&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有序列表则使用数字接着一个英文句点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的列表标记写成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或甚至是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。&lt;/p&gt;

&lt;p&gt;如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。&lt;/p&gt;

&lt;p&gt;列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。&lt;/p&gt;

&lt;p&gt;要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果你懒，那也行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签包起来，举例来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird
*   Magic&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird

*   Magic&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在列表项目内放进引用，那 &lt;code&gt;&amp;gt;&lt;/code&gt; 就需要缩进：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要放代码区块的话，该区块就需要缩进&lt;em&gt;两次&lt;/em&gt;，也就是 8 个空格或是 2 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   一列表项包含一个列表区块：

        &amp;lt;代码写在这&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，项目列表很可能会不小心产生，像是下面这样的写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986. What a great season.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;换句话说，也就是在行首出现&lt;em&gt;数字-句点-空白&lt;/em&gt;，要避免这样的状况，你可以在句点前面加上反斜杠。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986\. What a great season.&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='precode'&gt;代码区块&lt;/h3&gt;
&lt;p&gt;和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 标签来把代码区块包起来。&lt;/p&gt;

&lt;p&gt;要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落：

    这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转换成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是一个普通段落：&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;这是一个代码区块。
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &amp;quot;Foo&amp;quot;
        beep
    end tell&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &amp;quot;Foo&amp;quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。&lt;/p&gt;

&lt;p&gt;在代码区块里面， &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&amp;quot;footer&amp;quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。&lt;/p&gt;
&lt;h3 id='hr'&gt;分隔线&lt;/h3&gt;
&lt;p&gt;你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`* * *`

`***`

`*****`

`- - -`

`---------------------------------------`&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;&lt;h2 id='span'&gt;区段元素&lt;/h2&gt;&lt;h3 id='link'&gt;链接&lt;/h3&gt;
&lt;p&gt;Markdown 支持两种形式的链接语法： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;两种形式。&lt;/p&gt;

&lt;p&gt;不管是哪一种，链接文字都是用 [方括号] 来标记。&lt;/p&gt;

&lt;p&gt;要建立一个&lt;em&gt;行内式&lt;/em&gt;的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example](http://example.com/ &amp;quot;Title&amp;quot;) inline link.

[This link](http://example.net/) has no title attribute.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;Title&amp;quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.net/&amp;quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你是要链接到同样主机的资源，你可以使用相对路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;See my [About](/about/) page for details.   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;参考式&lt;/em&gt;的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example][id] reference-style link.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以选择性地在两个方括号中间加上一个空格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example] [id] reference-style link.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，在文件的任意处，你可以把这个标记的链接内容定义出来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/  &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接内容定义的形式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字&lt;/li&gt;

&lt;li&gt;接着一个冒号&lt;/li&gt;

&lt;li&gt;接着一个以上的空格或制表符&lt;/li&gt;

&lt;li&gt;接着链接的网址&lt;/li&gt;

&lt;li&gt;选择性地接着 title 内容，可以用单引号、双引号或是括弧包着&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面这三种链接的定义都是相同：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[foo]: http://example.com/  &amp;quot;Optional Title Here&amp;quot;
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。&lt;/p&gt;

&lt;p&gt;链接网址也可以用方括号包起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。&lt;/p&gt;

&lt;p&gt;链接辨别标签可以有字母、数字、空白和标点符号，但是并&lt;em&gt;不&lt;/em&gt;区分大小写，因此下面两个链接是一样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[link text][a]
[link text][A]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;隐式链接标记&lt;/em&gt;功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google][]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后定义链接内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google]: http://google.com/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Visit [Daring Fireball][] for more information.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后接着定义链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Daring Fireball]: http://daringfireball.net/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。&lt;/p&gt;

&lt;p&gt;下面是一个参考式链接的范例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &amp;quot;Google&amp;quot;
  [2]: http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [3]: http://search.msn.com/    &amp;quot;MSN Search&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果改成用链接名称的方式写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &amp;quot;Google&amp;quot;
  [yahoo]:  http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [msn]:    http://search.msn.com/    &amp;quot;MSN Search&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面两种写法都会产生下面的 HTML。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&amp;quot;http://google.com/&amp;quot;
title=&amp;quot;Google&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&amp;quot;http://search.yahoo.com/&amp;quot; title=&amp;quot;Yahoo Search&amp;quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&amp;quot;http://search.msn.com/&amp;quot; title=&amp;quot;MSN Search&amp;quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &amp;quot;Google&amp;quot;)
than from [Yahoo](http://search.yahoo.com/ &amp;quot;Yahoo Search&amp;quot;) or
[MSN](http://search.msn.com/ &amp;quot;MSN Search&amp;quot;).&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。&lt;/p&gt;

&lt;p&gt;使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。&lt;/p&gt;
&lt;h3 id='em'&gt;强调&lt;/h3&gt;
&lt;p&gt;Markdown 使用星号（&lt;code&gt;*&lt;/code&gt;）和底线（&lt;code&gt;_&lt;/code&gt;）作为标记强调字词的符号，被 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包围的字词会被转成用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签包围，用两个 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包起来的话，则会被转成 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。&lt;/p&gt;

&lt;p&gt;强调也可以直接插在文字中间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;un*frigging*believable&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是&lt;strong&gt;如果你的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 两边都有空白的话，它们就只会被当成普通的符号&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='code'&gt;代码&lt;/h3&gt;
&lt;p&gt;如果要标记一小段行内代码，你可以用反引号把它包起来（&lt;code&gt;`&lt;/code&gt;），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Use the `printf()` function.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``There is a literal backtick (`) here.``&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段语法会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;A single backtick in a code span: &amp;lt;code&amp;gt;`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;A backtick-delimited string in a code span: &amp;lt;code&amp;gt;`foo`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在代码区段内，&lt;code&gt;&amp;amp;&lt;/code&gt; 和方括号&lt;strong&gt;都&lt;/strong&gt;会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please don't use any `&amp;lt;blink&amp;gt;` tags.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don't use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='img'&gt;图片&lt;/h3&gt;
&lt;p&gt;很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。&lt;/p&gt;

&lt;p&gt;Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;行内式的图片语法看起来像是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &amp;quot;Optional title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细叙述如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个惊叹号 &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;接着一个方括号，里面放上图片的替代文字&lt;/li&gt;

&lt;li&gt;接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考式的图片语法则长得像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text][id]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: url/to/image  &amp;quot;Optional title attribute&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;
&lt;hr /&gt;&lt;h2 id='misc'&gt;其它&lt;/h2&gt;&lt;h3 id='autolink'&gt;自动链接&lt;/h3&gt;
&lt;p&gt;Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&amp;quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器里面，这段字串（其实是 &lt;code&gt;&amp;lt;a href=&amp;quot;mailto:address@example.com&amp;quot;&amp;gt;address@example.com&amp;lt;/a&amp;gt;&lt;/code&gt;）会变成一个可以点击的「address@example.com」链接。&lt;/p&gt;

&lt;p&gt;（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）&lt;/p&gt;
&lt;h3 id='backslash'&gt;反斜杠&lt;/h3&gt;
&lt;p&gt;Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签），你可以在星号的前面加上反斜杠：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*literal asterisks\*&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id='acknowledgement'&gt;感谢&lt;/h2&gt;
&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/#!/leafy7382&quot;&gt;leafy7382&lt;/a&gt; 协助翻译，&lt;a href=&quot;http://iamhlb.com/&quot;&gt;hlb&lt;/a&gt;、&lt;a href=&quot;http://twitter.com/randylien&quot;&gt;Randylien&lt;/a&gt; 帮忙润稿，&lt;a href=&quot;https://twitter.com/#!/ethantw&quot;&gt;ethantw&lt;/a&gt; 的&lt;a href=&quot;http://ethantw.net/projects/han/&quot;&gt;汉字标准格式・CSS Reset&lt;/a&gt;， &lt;a href=&quot;http://kidwm.net/&quot;&gt;WM&lt;/a&gt; 回报文字错误。&lt;/p&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/fenprace&quot;&gt;fenprace&lt;/a&gt;，&lt;a href=&quot;https://github.com/addv&quot;&gt;addv&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;&lt;h2 id='editor'&gt;Markdown 免费编辑器&lt;/h2&gt;
&lt;p&gt;Windows 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://code52.org/DownmarkerWPF/&quot;&gt;MarkPad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/retext/home/ReText/&quot;&gt;ReText&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在线编辑器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://markable.in/&quot;&gt;Markable.in&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://dillinger.io/&quot;&gt;Dillinger.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浏览器插件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog&quot;&gt;MaDe&lt;/a&gt; (Chrome)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;高级应用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt; + &lt;a href=&quot;http://ttscoff.github.com/MarkdownEditing/&quot;&gt;MarkdownEditing&lt;/a&gt; / &lt;a href=&quot;http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*** 如有更好的 Markdown 免费编辑器推荐，请到&lt;a href=&quot;https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1&quot;&gt;这里反馈&lt;/a&gt;，谢谢！&lt;/p&gt;

&lt;p&gt;(注：本文转载自&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Wow!Ubuntu&lt;/a&gt;,部分格式稍有修改。)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>博客功能更新（一）</title>
   <link href="http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/11/blogupdate1"/>
   <updated>2013-12-11T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/11/blogupdate1</id>
   <content type="html">&lt;p&gt;最近为了搭博客，研究了不少&lt;code&gt;jekyll&lt;/code&gt;和&lt;code&gt;web开发&lt;/code&gt;相关的内容，了解到&lt;code&gt;css&lt;/code&gt;的预处理器&lt;code&gt;sass&lt;/code&gt;，简单看了一些介绍，但尚未深入学习和使用。&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;今天给博客添加新功能，做了以下几件事：&lt;/h3&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;1. 将disqus评论插件替换为多说评论
2. 新建了Blog页面，分页预览博客概要，每页5篇
3. 新建了Links页面，用于添加好友博客地址以及收藏网址
4. 更新了About页面
5. 为Blog页面添加了css&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;_2&quot;&gt;接下来准备做的事：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1. 将导航条Archive，Tags，Categories合并为一个下拉菜单
2. 导航条标签排序
3. 继续学习Hadoop和Java&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;昨天在微博上看到雷军转发说本周是美国计算机科学教育周，奥巴马呼吁全民写代码，囧！&lt;/p&gt;

&lt;p&gt;不过这个看起来弱爆了的小游戏还是蛮有意思的!^_^&lt;a href=&quot;http://learn.code.org/hoc/1&quot;&gt;编程一小时&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>个人博客开张</title>
   <link href="http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/07/BlogBegins"/>
   <updated>2013-12-07T00:00:00+08:00</updated>
   <id>http://lionelcao.github.io/%E9%9A%8F%E7%AC%94/2013/12/07/BlogBegins</id>
   <content type="html">&lt;p&gt;断断续续折腾了一个多月，终于把博客搭好了。&lt;/p&gt;

&lt;p&gt;Web开发基本上0经验，以前零星自己看过一些&lt;code&gt;HTML&lt;/code&gt;代码，改过几个页面，当时调几个&lt;code&gt;div&lt;/code&gt;的布局就很头疼。好在现在搭个博客也不需要多少开发经验，慢慢研究一下还是搞定了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;刚开始是用&lt;code&gt;Wordpress&lt;/code&gt;，找了一个国外的免费主机，还算比较稳定。美中不足是屏蔽中国大陆IP，需要代理才能申请，比较麻烦，由于公司和家里IP一个国外一个国内，每次换IP还要邮箱重新激活一下才能进入管理界面，而且还不让绑定CN域名，原因嘛大家都懂的。在学wordpress的过程中看了一些&lt;a href=&quot;http://www.caopeng.net&quot;&gt;曹鹏&lt;/a&gt;做的教学视频，虽然视频讲的有点太细了，但很适合初学者学习。（感觉他的网站都在刻意展示技术一样，审美有点奇葩，小吐嘈一下=。=）。&lt;/p&gt;

&lt;p&gt;Wordpress好处是安装方便，好看的主题很多，有成熟的后台管理和丰富的插件，要说不足的话就是好的免费&lt;code&gt;php&lt;/code&gt;主机太少了，加上还要管理&lt;code&gt;MySQL&lt;/code&gt;数据库，备份起来也有点麻烦。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://www.haoch.me&quot;&gt;Hchen9&lt;/a&gt;同学的推荐下，开始学习在&lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;上搭个人博客。&lt;/p&gt;

&lt;p&gt;说实话还真有点儿费劲，刚开始的时候会遇到很多问题，因为之前对&lt;code&gt;git&lt;/code&gt;，&lt;code&gt;jekyll&lt;/code&gt;，&lt;code&gt;ssh&lt;/code&gt;还有&lt;code&gt;css&lt;/code&gt;都不熟。后来在网上看了N篇教程，慢慢摸索之下还是一点点搭起来了，解决问题的过程那真是痛并快乐着啊～整这玩意儿占据了大量的业余时间，现在&lt;code&gt;dota&lt;/code&gt;也没时间搞了，刚好妹子也不同意玩儿&lt;code&gt;dota&lt;/code&gt;，于是含泪把&lt;code&gt;11game&lt;/code&gt;卸载了T T。。。&lt;/p&gt;

&lt;p&gt;后面有时间专门整理一份自己的搭github博客的过程吧。对于想拥有一个可以完全自己定制的博客的同学来说，&lt;code&gt;github&lt;/code&gt;真是一个不错的选择～&lt;code&gt;喂——你这是在做广告吗亲？！&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;好吧，又到了该睡觉的时间了，今天用的这个中文输入法很不爽，我发誓明天一定要换掉它！！！&lt;/p&gt;</content>
 </entry>
 
 
</feed>